var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.716,1,1.716]],["body/controllers/AppController.html",[0,3.036,1,2.63,2,2.824,3,0.678,4,0.587,5,0.587,6,2.824,7,0.587,8,4.402,9,3.036,10,2.63,11,3.036,12,0.678,13,1.426,14,5.08,15,2.076,16,0.046,17,0.998,18,3.474,19,1.565,20,4.832,21,2.237,22,1.125,23,3.578,24,0.678,25,0.882,26,0.678,27,0.277,28,3.474,29,0.028,30,0.035,31,0.028]],["title/modules/AppModule.html",[32,1.329,33,1.716]],["body/modules/AppModule.html",[1,2.698,2,3.264,3,0.589,4,0.51,5,0.51,7,0.51,9,2.769,10,2.399,11,2.769,16,0.045,24,1.043,25,0.766,26,0.589,27,0.241,29,0.024,30,0.032,31,0.024,32,2.228,33,3.193,34,1.396,35,1.859,36,2.451,37,2.451,38,2.701,39,2.386,40,2.399,41,1.802,42,1.58,43,3.016,44,2.769,45,2.769,46,3.016,47,1.58,48,2.451,49,1.802,50,3.016,51,1.396,52,1.802,53,2.769,54,3.016,55,2.451,56,3.016,57,3.016,58,3.016,59,3.016,60,2.399,61,3.016,62,3.016,63,1.802,64,2.08,65,4.015,66,3.016,67,3.016]],["title/modules/AuthModule.html",[32,1.329,38,1.505]],["body/modules/AuthModule.html",[3,0.542,4,0.469,5,0.469,7,0.469,16,0.046,24,1.038,25,0.705,26,0.542,27,0.221,29,0.022,30,0.031,31,0.022,32,2.153,34,1.284,35,1.757,38,2.889,39,2.328,40,2.268,41,1.658,42,1.454,45,2.618,51,1.284,52,1.658,55,2.256,68,2.256,69,2.256,70,2.775,71,2.256,72,2.534,73,2.636,74,2.328,75,2.775,76,3.796,77,3.086,78,2.618,79,3.796,80,3.086,81,3.086,82,3.796,83,1.658,84,2.775,85,1.914,86,2.256,87,2.775,88,2.775,89,2.268,90,2.775,91,2.775,92,2.775,93,1.454,94,2.775,95,2.775,96,2.256,97,2.775,98,1.914,99,2.775]],["title/classes/AuthResolver.html",[27,0.229,89,1.716]],["body/classes/AuthResolver.html",[3,0.469,4,0.406,5,0.406,7,0.677,12,0.469,13,1.112,15,2.052,16,0.047,17,1.151,19,1.415,22,1.112,24,0.853,26,0.469,27,0.192,29,0.019,30,0.028,31,0.019,47,1.26,60,1.437,63,2.611,72,2.384,86,1.955,89,2.872,100,1.26,101,1.955,102,2.792,103,3.435,104,4.022,105,2.225,106,3.757,107,4.806,108,1.26,109,2.405,110,2.405,111,2.052,112,1.112,113,0.986,114,0.767,115,1.112,116,2.369,117,1.41,118,2.792,119,1.955,120,3.552,121,3.435,122,2.405,123,3.552,124,3.257,125,3.435,126,3.435,127,2.052,128,2.792,129,3.435,130,2.29,131,3.435,132,2.405,133,1.955,134,1.955,135,1.658,136,1.658,137,2.369,138,2.405,139,2.405,140,1.41,141,2.405,142,1.437,143,1.26,144,2.405]],["title/injectables/AuthService.html",[72,1.329,145,0.729]],["body/injectables/AuthService.html",[3,0.372,4,0.322,5,0.322,7,0.489,12,0.372,13,0.937,16,0.047,17,1.005,19,1.36,21,2.047,22,0.937,24,0.897,25,0.484,26,0.372,27,0.152,29,0.015,30,0.023,31,0.015,51,0.882,52,1.139,72,1.808,74,2.288,85,1.315,93,1.517,98,1.315,105,2.047,106,3.175,108,1.517,111,1.729,112,1.133,113,1.005,114,0.781,115,1.133,116,1.996,117,1.886,118,2.353,119,2.353,120,3.175,124,2.353,127,2.334,130,2.047,134,1.55,135,1.315,136,1.315,140,1.815,142,2.09,143,1.833,145,0.735,146,0.882,147,1.55,148,3.498,149,1.906,150,4.848,151,2.029,152,1.906,153,2.642,154,3.594,155,1.996,156,1.996,157,2.353,158,1.517,159,1.906,160,2.894,161,1.906,162,3.906,163,1.906,164,1.729,165,1.808,166,2.894,167,1.906,168,1.906,169,0.782,170,1.906,171,2.09,172,2.334,173,1.906,174,2.894,175,1.906,176,2.894,177,1.315,178,1.55,179,1.315,180,1.906,181,1.906,182,1.906,183,1.906,184,1.517,185,1.55,186,1.906,187,1.55,188,2.894,189,1.906,190,1.906,191,1.906,192,1.315]],["title/injectables/GqlAuthGuard.html",[145,0.729,193,1.716]],["body/injectables/GqlAuthGuard.html",[3,0.604,4,0.523,5,0.523,7,0.523,12,0.604,13,1.323,16,0.047,17,0.889,19,1.481,22,1.003,24,0.892,25,0.786,26,0.604,27,0.247,29,0.025,30,0.033,31,0.025,47,1.622,64,2.817,83,1.85,112,1.003,113,0.889,114,0.691,115,1.003,140,1.271,145,1.037,146,1.433,172,1.85,193,2.906,194,3.321,195,2.516,196,4.085,197,5.055,198,3.953,199,4.085,200,4.863,201,4.085,202,4.221,203,3.095,204,3.095,205,2.516,206,3.095,207,2.516,208,3.095,209,3.095]],["title/injectables/JwtStrategy.html",[73,1.505,145,0.729]],["body/injectables/JwtStrategy.html",[3,0.555,4,0.48,5,0.48,7,0.48,12,0.555,13,1.522,16,0.046,17,1.108,19,1.591,22,0.92,24,0.917,25,0.722,26,0.555,27,0.227,29,0.023,30,0.031,31,0.023,51,1.316,52,1.698,73,2.022,83,1.698,93,2.296,96,2.31,105,2.028,108,2.296,112,0.92,113,0.816,114,0.635,115,0.92,116,3.494,127,2.808,140,1.167,145,0.98,146,1.316,153,2.306,154,3.136,165,1.316,177,1.96,185,3.136,187,2.31,205,2.31,210,2.31,211,3.858,212,3.561,213,2.842,214,2.661,215,4.381,216,3.858,217,2.842,218,1.96,219,2.842,220,2.842,221,2.842,222,2.842,223,2.842,224,2.842,225,2.842,226,2.842,227,2.842,228,2.842,229,2.842,230,2.31,231,2.842,232,2.842,233,2.842,234,2.842,235,2.842]],["title/injectables/PasswordService.html",[74,1.329,145,0.729]],["body/injectables/PasswordService.html",[3,0.488,4,0.423,5,0.423,7,0.692,12,0.488,13,1.441,16,0.046,17,1.176,19,1.441,21,2.406,22,1.144,24,0.689,25,0.635,26,0.488,27,0.199,29,0.02,30,0.028,31,0.02,74,1.635,112,1.144,113,1.014,114,0.914,115,1.144,130,2.331,140,1.68,145,0.897,146,1.158,156,2.823,157,3.813,158,2.894,171,2.446,214,2.435,236,2.033,237,2.871,238,4.094,239,3.532,240,3.532,241,3.532,242,4.691,243,2.501,244,4.869,245,4.068,246,3.532,247,2.501,248,1.725,249,1.725,250,1.725,251,3.532,252,2.501,253,3.532,254,3.532,255,2.501,256,2.501,257,2.501,258,2.501,259,2.501]],["title/classes/User1625698873164.html",[27,0.229,260,1.98]],["body/classes/User1625698873164.html",[3,0.551,4,0.477,5,0.477,7,0.477,12,0.551,13,1.245,16,0.046,17,1.104,22,1.245,24,0.551,26,0.551,27,0.225,29,0.023,30,0.031,31,0.023,44,3.012,100,1.48,105,2.341,112,1.245,113,1.104,114,0.858,115,1.245,117,1.577,130,2.456,143,2.014,153,2.296,158,2.289,164,2.296,165,2.169,178,2.296,260,2.65,261,3.55,262,2.296,263,3.843,264,3.843,265,4.367,266,3.55,267,3.843,268,4.367,269,4.111,270,3.843,271,3.843,272,3.843,273,5.338,274,2.825,275,3.843,276,2.825,277,1.688,278,3.843,279,2.825,280,2.825,281,2.825,282,2.825]],["title/classes/UserEntity.html",[27,0.229,169,1.178]],["body/classes/UserEntity.html",[3,0.36,4,0.312,5,0.312,7,0.58,12,0.36,15,2.8,16,0.047,17,1.346,21,2.395,24,0.551,26,0.36,27,0.147,29,0.015,30,0.023,31,0.015,60,2.929,100,0.968,113,0.53,114,1.073,115,1.244,117,2.124,128,2.296,135,1.273,136,1.273,153,1.688,155,2.65,158,2.17,164,2.474,165,2.223,169,1.159,192,2.855,214,1.948,237,2.296,248,1.948,249,1.948,250,1.948,266,2.788,269,2.296,277,1.103,283,1.501,284,2.824,285,2.296,286,3.43,287,3.43,288,4.14,289,4.14,290,3.43,291,3.43,292,1.846,293,2.824,294,3.123,295,4.366,296,4.686,297,1.846,298,2.824,299,2.824,300,2.824,301,2.824,302,4.902,303,2.824,304,3.43,305,1.846,306,2.296,307,2.824,308,3.842,309,3.43,310,1.846,311,2.824,312,3.842,313,1.846,314,1.846,315,1.846,316,3.43,317,1.846,318,2.824,319,1.846,320,2.824]],["title/classes/UserResolver.html",[27,0.229,321,1.716]],["body/classes/UserResolver.html",[3,0.5,4,0.433,5,0.433,7,0.701,12,0.5,13,1.163,15,1.531,16,0.047,17,1.032,19,0.83,22,0.83,24,0.958,25,0.651,26,0.5,27,0.204,29,0.021,30,0.029,31,0.021,47,1.343,63,2.147,100,1.343,102,2.92,104,3.848,105,1.92,108,1.883,111,2.147,112,1.163,113,1.032,114,0.802,115,1.163,117,2.145,123,2.92,133,2.083,140,1.475,142,1.531,143,1.343,151,2.145,169,1.845,171,1.531,193,1.531,218,1.767,321,2.932,322,2.083,323,3.592,324,3.592,325,2.563,326,2.563,327,2.477,328,3.655,329,2.563,330,2.563,331,2.563,332,2.92,333,2.92,334,3.592,335,2.083,336,1.767,337,2.563,338,1.767,339,2.563,340,2.563,341,2.563,342,2.563,343,2.563,344,2.563,345,2.563,346,2.563]],["title/injectables/UserService.html",[145,0.729,151,1.178]],["body/injectables/UserService.html",[3,0.388,4,0.336,5,0.336,7,0.505,12,0.388,13,0.967,16,0.047,17,1.228,19,1.292,21,1.661,22,1.292,24,0.779,25,0.505,26,0.388,27,0.158,29,0.016,30,0.024,31,0.016,49,1.187,105,2.379,108,1.565,111,1.784,112,1.292,113,1.146,114,0.891,115,1.292,117,2.11,130,2.512,140,1.637,142,1.187,143,2.091,145,0.758,146,0.92,151,1.844,164,2.144,165,1.846,169,0.816,171,1.187,172,1.784,179,2.059,184,2.091,192,2.751,248,2.474,277,1.187,327,3.545,328,4.363,332,2.427,333,2.427,338,1.37,347,1.615,348,3.243,349,2.986,350,2.986,351,2.986,352,1.987,353,3.989,354,1.987,355,2.986,356,3.587,357,1.987,358,1.987,359,2.986,360,1.987,361,2.986,362,1.987,363,1.987,364,1.987,365,1.987,366,1.987,367,1.987,368,1.987,369,1.37,370,1.987,371,1.987,372,1.987,373,1.987]],["title/modules/UsersModule.html",[32,1.329,39,1.329]],["body/modules/UsersModule.html",[3,0.614,4,0.532,5,0.532,7,0.532,16,0.046,24,0.992,25,0.799,26,0.614,27,0.251,29,0.025,30,0.033,31,0.025,32,2.266,34,1.457,35,1.912,39,2.461,40,2.468,41,1.881,42,1.649,45,2.17,48,2.558,49,1.881,77,3.357,78,2.848,80,3.357,81,3.357,117,2.009,151,2.292,155,2.848,169,1.292,321,2.468,335,2.558,338,2.17,374,2.558,375,2.558,376,2.558,377,3.147,378,3.147,379,3.147]],["title/contributing.html",[380,1.665,381,1.665,382,2.414]],["body/contributing.html",[4,0.342,16,0.036,23,1.647,29,0.016,30,0.024,31,0.016,44,1.397,78,1.397,112,0.656,184,1.062,198,2.463,230,1.647,245,1.647,327,1.397,348,1.647,369,2.089,383,2.026,384,2.026,385,2.026,386,2.026,387,3.629,388,3.03,389,2.026,390,2.026,391,3.03,392,2.026,393,3.03,394,3.03,395,2.026,396,2.026,397,2.026,398,3.03,399,4.028,400,2.026,401,2.026,402,2.026,403,2.026,404,2.026,405,2.026,406,2.026,407,2.026,408,2.026,409,2.026,410,2.026,411,2.026,412,2.026,413,3.03,414,2.026,415,2.026,416,2.026,417,3.03,418,2.026,419,2.026,420,2.026,421,4.028,422,2.026,423,2.026,424,2.026,425,2.026,426,2.026,427,2.026,428,2.026,429,2.026,430,2.026,431,2.026,432,2.026,433,2.026,434,2.026,435,2.026,436,2.026,437,2.026,438,2.026,439,3.629,440,3.629,441,3.629,442,3.03,443,3.629,444,2.026,445,3.629,446,2.463,447,2.026,448,3.629,449,3.03,450,2.026,451,2.026,452,3.03,453,3.03,454,2.026,455,3.03,456,2.026,457,2.026,458,3.505,459,3.505,460,2.026,461,1.397,462,2.026,463,2.026,464,3.03,465,2.026,466,3.629,467,2.026,468,3.03,469,2.026,470,3.03,471,2.026,472,2.026,473,3.629,474,2.026,475,2.026,476,2.026,477,2.026,478,2.026,479,3.03,480,2.026,481,2.026,482,2.026,483,2.026,484,2.026,485,2.026,486,2.026,487,2.026,488,2.026,489,2.026,490,2.026,491,2.026,492,2.026,493,2.026,494,3.03,495,2.026,496,3.03,497,2.026,498,2.026,499,2.026,500,3.03,501,2.026,502,2.026,503,2.026,504,2.026,505,2.026,506,2.026,507,2.026,508,2.026,509,2.026,510,1.647,511,2.026,512,3.03,513,2.026,514,2.026,515,2.026,516,2.026,517,2.026,518,1.647,519,2.026,520,2.026,521,2.026,522,2.026,523,2.026,524,2.026,525,2.026,526,2.026,527,2.026,528,2.026,529,2.026,530,2.026,531,2.026,532,2.026,533,2.026,534,2.026,535,2.026,536,2.026,537,3.629,538,3.03,539,3.03,540,3.03,541,2.026,542,2.026,543,2.026,544,2.026,545,3.03,546,3.03,547,2.026,548,2.026,549,2.026,550,2.026,551,2.026,552,2.026,553,2.026,554,2.026,555,2.026,556,2.026,557,2.026,558,2.026]],["title/coverage.html",[461,2.679]],["body/coverage.html",[0,1.774,1,1.774,5,0.502,6,2.413,16,0.046,27,0.381,29,0.024,30,0.032,31,0.024,51,1.839,53,2.047,72,1.374,73,1.555,74,1.374,89,1.774,101,2.413,114,0.663,137,2.047,145,1.266,147,2.413,151,1.218,169,1.218,184,1.555,193,1.774,194,2.413,195,2.413,210,2.413,236,2.413,260,2.047,261,2.413,262,2.413,283,2.413,285,2.413,306,2.413,321,1.774,322,2.413,336,2.047,347,2.413,461,2.047,559,2.047,560,2.968,561,5.534,562,3.973,563,2.413,564,4.985,565,4.782,566,2.413,567,3.973,568,2.968,569,2.968,570,3.973,571,2.413,572,2.968,573,2.968,574,2.413,575,3.973,576,3.973,577,2.413,578,2.413,579,2.968,580,2.047,581,2.968,582,2.968,583,2.968]],["title/dependencies.html",[35,1.594,584,2.414]],["body/dependencies.html",[16,0.047,25,0.661,29,0.021,30,0.029,31,0.021,35,1.206,47,1.365,49,1.557,63,2.501,83,1.557,85,1.797,93,1.365,114,0.582,156,1.797,212,2.954,277,1.557,580,2.506,585,2.605,586,5.369,587,2.605,588,2.605,589,2.605,590,2.605,591,2.605,592,2.605,593,2.605,594,4.185,595,2.954,596,2.605,597,3.634,598,3.634,599,2.605,600,2.605,601,2.605,602,4.185,603,2.605,604,2.605,605,3.634,606,2.605,607,2.605,608,3.402,609,2.605,610,2.605,611,2.605,612,2.605,613,2.605,614,3.634,615,3.634,616,2.605,617,4.185,618,2.605,619,2.605,620,2.605,621,2.605,622,2.605,623,2.605,624,2.605,625,3.634,626,2.605,627,2.605,628,2.605,629,2.605,630,2.605,631,2.605,632,2.605,633,2.605,634,2.605,635,2.118,636,2.605,637,2.605,638,2.605,639,2.605,640,2.605,641,2.605,642,2.605,643,2.605,644,2.605,645,2.605,646,2.605,647,2.605,648,2.605,649,2.605]],["title/miscellaneous/functions.html",[650,1.443,651,2.799]],["body/miscellaneous/functions.html",[9,2.927,10,2.536,11,2.927,12,0.828,16,0.04,29,0.034,30,0.04,31,0.034,578,3.45,580,3.752,650,2.536,651,3.45,652,4.244]],["title/index.html",[12,0.471,380,1.665,381,1.665]],["body/index.html",[16,0.041,29,0.036,30,0.041,31,0.036,559,3.051,653,4.424,654,4.424]],["title/license.html",[380,1.665,381,1.665,655,1.962]],["body/license.html",[16,0.033,29,0.025,30,0.033,31,0.025,42,1.633,459,3.335,518,4.426,559,2.149,608,2.533,655,2.533,656,3.116,657,4.588,658,3.116,659,3.116,660,3.116,661,4.103,662,3.116,663,3.116,664,3.116,665,3.116,666,3.116,667,3.116,668,4.103,669,3.116,670,3.116,671,3.116,672,4.588,673,3.116,674,4.103,675,3.116,676,3.116,677,3.116,678,3.116,679,3.116,680,3.116,681,3.116,682,3.116,683,3.116,684,4.103,685,3.116,686,3.116,687,3.116,688,3.116,689,3.116,690,3.116,691,3.116,692,4.103,693,4.103,694,3.116,695,3.116,696,3.116,697,3.116,698,3.116,699,3.116,700,3.116,701,3.116,702,3.116,703,3.116,704,3.116,705,3.116,706,3.116,707,3.116,708,3.116,709,3.116,710,3.116,711,3.116,712,3.116,713,3.116,714,3.116,715,3.116,716,3.116,717,3.116,718,3.116,719,3.116,720,3.116,721,2.533,722,3.116]],["title/modules.html",[34,1.798]],["body/modules.html",[16,0.04,29,0.034,30,0.04,31,0.034,33,2.491,34,1.929,38,2.185,39,1.929,595,4.257,723,5.237,724,5.237,725,5.237]],["title/overview.html",[726,3.158]],["body/overview.html",[0,1.96,16,0.045,29,0.026,30,0.034,31,0.026,33,3.152,34,1.518,35,1.964,36,2.666,37,2.666,38,2.944,39,2.485,40,2.535,41,1.96,42,1.719,68,2.666,69,2.666,71,2.666,72,2.485,73,2.465,74,2.177,100,1.719,146,1.518,151,2.204,369,2.262,374,2.666,375,2.666,376,2.666,510,2.666,726,2.666,727,3.279,728,3.279]],["title/miscellaneous/variables.html",[650,1.443,729,2.799]],["body/miscellaneous/variables.html",[7,0.407,10,1.441,12,0.471,16,0.047,19,1.558,21,1.593,29,0.019,30,0.028,31,0.019,51,2.025,53,2.373,60,2.056,64,1.663,93,1.264,98,1.663,113,0.692,114,1.074,127,1.441,137,2.373,158,2.103,165,1.857,172,1.441,177,2.767,179,1.663,184,2.103,202,3.556,207,3.261,218,2.373,249,3.191,250,3.491,294,3.761,336,2.373,446,1.96,458,1.96,563,1.96,566,1.96,571,1.96,574,1.96,577,1.96,635,2.797,650,1.441,721,1.96,729,1.96,730,2.411,731,2.411,732,2.411,733,2.411,734,2.411,735,3.441,736,2.411,737,4.012,738,3.441,739,2.411,740,2.411,741,2.411,742,2.411,743,2.411,744,2.411,745,2.411,746,2.411,747,2.411,748,2.411,749,2.411,750,2.411,751,2.411,752,2.411,753,2.411,754,2.411,755,2.411,756,2.411,757,3.441,758,2.411,759,2.411,760,3.441,761,2.411,762,2.411,763,2.411,764,2.411,765,2.411,766,2.411,767,2.411,768,2.411,769,2.411,770,2.411,771,2.411,772,2.411,773,2.411,774,2.411,775,2.411]]],"invertedIndex":[["",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/User1625698873164.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"contributing.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":575,"title":{},"body":{"coverage.html":{}}}],["0.1.13",{"_index":643,"title":{},"body":{"dependencies.html":{}}}],["0.11.4",{"_index":649,"title":{},"body":{"dependencies.html":{}}}],["0.2.32",{"_index":647,"title":{},"body":{"dependencies.html":{}}}],["0.3.2",{"_index":636,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":637,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":576,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":369,"title":{},"body":{"injectables/UserService.html":{},"contributing.html":{},"overview.html":{}}}],["1,2,3",{"_index":511,"title":{},"body":{"contributing.html":{}}}],["1/1",{"_index":565,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":582,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":251,"title":{},"body":{"injectables/PasswordService.html":{}}}],["10.0.0",{"_index":612,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":561,"title":{},"body":{"coverage.html":{}}}],["10k",{"_index":410,"title":{},"body":{"contributing.html":{}}}],["12.0.0",{"_index":615,"title":{},"body":{"dependencies.html":{}}}],["12.1.0",{"_index":598,"title":{},"body":{"dependencies.html":{}}}],["12.1.1",{"_index":586,"title":{},"body":{"dependencies.html":{}}}],["12.2.0",{"_index":617,"title":{},"body":{"dependencies.html":{}}}],["12.5.6",{"_index":624,"title":{},"body":{"dependencies.html":{}}}],["15.5.0",{"_index":632,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":509,"title":{},"body":{"contributing.html":{}}}],["2.0.0",{"_index":646,"title":{},"body":{"dependencies.html":{}}}],["2.23.0",{"_index":628,"title":{},"body":{"dependencies.html":{}}}],["2.6.0",{"_index":627,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":562,"title":{},"body":{"coverage.html":{}}}],["2021",{"_index":659,"title":{},"body":{"license.html":{}}}],["2a$10$d6wr5w1xiitsqpg4atuqiokct0dpr8tscivs39yp3nsowwy1wypsy",{"_index":282,"title":{},"body":{"classes/User1625698873164.html":{}}}],["3",{"_index":510,"title":{},"body":{"contributing.html":{},"overview.html":{}}}],["3.3.21",{"_index":601,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":570,"title":{},"body":{"coverage.html":{}}}],["3/4",{"_index":569,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":581,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":728,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":638,"title":{},"body":{"dependencies.html":{}}}],["4.15.2",{"_index":631,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":567,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":727,"title":{},"body":{"overview.html":{}}}],["5.0.1",{"_index":629,"title":{},"body":{"dependencies.html":{}}}],["5.0.2",{"_index":630,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":308,"title":{},"body":{"classes/UserEntity.html":{}}}],["6/6",{"_index":573,"title":{},"body":{"coverage.html":{}}}],["7.0.0",{"_index":602,"title":{},"body":{"dependencies.html":{}}}],["7.0.4",{"_index":634,"title":{},"body":{"dependencies.html":{}}}],["7.1.5",{"_index":609,"title":{},"body":{"dependencies.html":{}}}],["7.1.6",{"_index":606,"title":{},"body":{"dependencies.html":{}}}],["7.10.6",{"_index":604,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":605,"title":{},"body":{"dependencies.html":{}}}],["75",{"_index":568,"title":{},"body":{"coverage.html":{}}}],["8.6.0",{"_index":640,"title":{},"body":{"dependencies.html":{}}}],["9/9",{"_index":572,"title":{},"body":{"coverage.html":{}}}],["above",{"_index":691,"title":{},"body":{"license.html":{}}}],["access",{"_index":128,"title":{},"body":{"classes/AuthResolver.html":{},"classes/UserEntity.html":{}}}],["accesstoken",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{}}}],["action",{"_index":716,"title":{},"body":{"license.html":{}}}],["add",{"_index":263,"title":{},"body":{"classes/User1625698873164.html":{}}}],["admin",{"_index":265,"title":{},"body":{"classes/User1625698873164.html":{}}}],["admin@example.com",{"_index":267,"title":{},"body":{"classes/User1625698873164.html":{}}}],["alone",{"_index":529,"title":{},"body":{"contributing.html":{}}}],["already",{"_index":397,"title":{},"body":{"contributing.html":{}}}],["always",{"_index":458,"title":{},"body":{"contributing.html":{},"miscellaneous/variables.html":{}}}],["and/or",{"_index":682,"title":{},"body":{"license.html":{}}}],["angular",{"_index":626,"title":{},"body":{"dependencies.html":{}}}],["angular/animations",{"_index":585,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk",{"_index":587,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":588,"title":{},"body":{"dependencies.html":{}}}],["angular/compiler",{"_index":589,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":590,"title":{},"body":{"dependencies.html":{}}}],["angular/forms",{"_index":591,"title":{},"body":{"dependencies.html":{}}}],["angular/localize",{"_index":592,"title":{},"body":{"dependencies.html":{}}}],["angular/material",{"_index":593,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":594,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":599,"title":{},"body":{"dependencies.html":{}}}],["api",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["apollo",{"_index":625,"title":{},"body":{"dependencies.html":{}}}],["apollo/client",{"_index":600,"title":{},"body":{"dependencies.html":{}}}],["app",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"miscellaneous/functions.html":{}}}],["app.controller",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["app.resolver",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["app/shared/utils/interfaces",{"_index":136,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/UserEntity.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appmodule",{"_index":33,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["apps/.../app.resolver.ts",{"_index":733,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../auth.decorator.ts",{"_index":734,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../environment.prod.ts",{"_index":731,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../environment.ts",{"_index":732,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../main.ts",{"_index":652,"title":{},"body":{"miscellaneous/functions.html":{}}}],["apps/.../user.decorator.ts",{"_index":730,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/backend/api/src/app/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/app.controller.ts:13",{"_index":18,"title":{},"body":{"controllers/AppController.html":{}}}],["apps/backend/api/src/app/app.module.ts",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["apps/backend/api/src/app/app.resolver.ts",{"_index":563,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/backend/api/src/app/auth/auth.module.ts",{"_index":75,"title":{},"body":{"modules/AuthModule.html":{}}}],["apps/backend/api/src/app/auth/decorators/auth.decorator.ts",{"_index":566,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/backend/api/src/app/auth/resolvers/auth.resolver.ts",{"_index":101,"title":{},"body":{"classes/AuthResolver.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/auth/resolvers/auth.resolver.ts:13",{"_index":110,"title":{},"body":{"classes/AuthResolver.html":{}}}],["apps/backend/api/src/app/auth/resolvers/auth.resolver.ts:27",{"_index":122,"title":{},"body":{"classes/AuthResolver.html":{}}}],["apps/backend/api/src/app/auth/resolvers/auth.resolver.ts:37",{"_index":132,"title":{},"body":{"classes/AuthResolver.html":{}}}],["apps/backend/api/src/app/auth/services/auth.service.ts",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/auth/services/auth.service.ts:14",{"_index":152,"title":{},"body":{"injectables/AuthService.html":{}}}],["apps/backend/api/src/app/auth/services/auth.service.ts:34",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{}}}],["apps/backend/api/src/app/auth/services/auth.service.ts:56",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{}}}],["apps/backend/api/src/app/auth/services/jwt.strategy.ts",{"_index":210,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/auth/services/jwt.strategy.ts:12",{"_index":213,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["apps/backend/api/src/app/auth/services/jwt.strategy.ts:28",{"_index":217,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["apps/backend/api/src/app/auth/services/password.service.ts",{"_index":236,"title":{},"body":{"injectables/PasswordService.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/auth/services/password.service.ts:13",{"_index":252,"title":{},"body":{"injectables/PasswordService.html":{}}}],["apps/backend/api/src/app/auth/services/password.service.ts:19",{"_index":247,"title":{},"body":{"injectables/PasswordService.html":{}}}],["apps/backend/api/src/app/auth/services/password.service.ts:28",{"_index":243,"title":{},"body":{"injectables/PasswordService.html":{}}}],["apps/backend/api/src/app/users/decorators/user.decorator.ts",{"_index":571,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/backend/api/src/app/users/entities/user.entity.ts",{"_index":283,"title":{},"body":{"classes/UserEntity.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/users/entities/user.entity.ts:21",{"_index":305,"title":{},"body":{"classes/UserEntity.html":{}}}],["apps/backend/api/src/app/users/entities/user.entity.ts:27",{"_index":292,"title":{},"body":{"classes/UserEntity.html":{}}}],["apps/backend/api/src/app/users/entities/user.entity.ts:33",{"_index":317,"title":{},"body":{"classes/UserEntity.html":{}}}],["apps/backend/api/src/app/users/entities/user.entity.ts:42",{"_index":297,"title":{},"body":{"classes/UserEntity.html":{}}}],["apps/backend/api/src/app/users/entities/user.entity.ts:48",{"_index":315,"title":{},"body":{"classes/UserEntity.html":{}}}],["apps/backend/api/src/app/users/entities/user.entity.ts:54",{"_index":313,"title":{},"body":{"classes/UserEntity.html":{}}}],["apps/backend/api/src/app/users/entities/user.entity.ts:64",{"_index":319,"title":{},"body":{"classes/UserEntity.html":{}}}],["apps/backend/api/src/app/users/entities/user.entity.ts:74",{"_index":310,"title":{},"body":{"classes/UserEntity.html":{}}}],["apps/backend/api/src/app/users/guards/gql.auth",{"_index":194,"title":{},"body":{"injectables/GqlAuthGuard.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/users/resolvers/user.resolver.ts",{"_index":322,"title":{},"body":{"classes/UserResolver.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/users/resolvers/user.resolver.ts:12",{"_index":326,"title":{},"body":{"classes/UserResolver.html":{}}}],["apps/backend/api/src/app/users/resolvers/user.resolver.ts:30",{"_index":331,"title":{},"body":{"classes/UserResolver.html":{}}}],["apps/backend/api/src/app/users/services/user.service.ts",{"_index":347,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/users/services/user.service.ts:11",{"_index":354,"title":{},"body":{"injectables/UserService.html":{}}}],["apps/backend/api/src/app/users/services/user.service.ts:26",{"_index":358,"title":{},"body":{"injectables/UserService.html":{}}}],["apps/backend/api/src/app/users/services/user.service.ts:35",{"_index":360,"title":{},"body":{"injectables/UserService.html":{}}}],["apps/backend/api/src/app/users/services/user.service.ts:44",{"_index":362,"title":{},"body":{"injectables/UserService.html":{}}}],["apps/backend/api/src/app/users/services/user.service.ts:55",{"_index":357,"title":{},"body":{"injectables/UserService.html":{}}}],["apps/backend/api/src/app/users/users.module.ts",{"_index":377,"title":{},"body":{"modules/UsersModule.html":{}}}],["apps/backend/api/src/environments/environment.prod.ts",{"_index":574,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/backend/api/src/environments/environment.ts",{"_index":577,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/backend/api/src/main.ts",{"_index":578,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["apps/backend/api/src/migrations/1625698873164",{"_index":261,"title":{},"body":{"classes/User1625698873164.html":{},"coverage.html":{}}}],["args",{"_index":771,"title":{},"body":{"miscellaneous/variables.html":{}}}],["args.password",{"_index":774,"title":{},"body":{"miscellaneous/variables.html":{}}}],["args.username",{"_index":773,"title":{},"body":{"miscellaneous/variables.html":{}}}],["arising",{"_index":720,"title":{},"body":{"license.html":{}}}],["around",{"_index":512,"title":{},"body":{"contributing.html":{}}}],["arrows",{"_index":516,"title":{},"body":{"contributing.html":{}}}],["associated",{"_index":669,"title":{},"body":{"license.html":{}}}],["ast",{"_index":767,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ast.kind",{"_index":764,"title":{},"body":{"miscellaneous/variables.html":{}}}],["async",{"_index":105,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/User1625698873164.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["atomic",{"_index":469,"title":{},"body":{"contributing.html":{}}}],["aurora",{"_index":743,"title":{},"body":{"miscellaneous/variables.html":{}}}],["auth",{"_index":76,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.graphql",{"_index":103,"title":{},"body":{"classes/AuthResolver.html":{}}}],["auth/auth.module",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["authentication",{"_index":79,"title":{},"body":{"modules/AuthModule.html":{}}}],["authguard",{"_index":204,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["authguard('jwt",{"_index":206,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["authmodule",{"_index":38,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["authors",{"_index":709,"title":{},"body":{"license.html":{}}}],["authresolver",{"_index":89,"title":{"classes/AuthResolver.html":{}},"body":{"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"coverage.html":{}}}],["authservice",{"_index":72,"title":{"injectables/AuthService.html":{}},"body":{"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["autogenerate",{"_index":295,"title":{},"body":{"classes/UserEntity.html":{}}}],["autoloadentities",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["avoid",{"_index":501,"title":{},"body":{"contributing.html":{}}}],["await",{"_index":143,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/User1625698873164.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["backend",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"miscellaneous/functions.html":{}}}],["backend/api",{"_index":28,"title":{},"body":{"controllers/AppController.html":{}}}],["base",{"_index":8,"title":{},"body":{"controllers/AppController.html":{}}}],["bcrypt",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PasswordService.html":{},"dependencies.html":{}}}],["below",{"_index":465,"title":{},"body":{"contributing.html":{}}}],["bigger",{"_index":478,"title":{},"body":{"contributing.html":{}}}],["bootstrap",{"_index":580,"title":{},"body":{"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{}}}],["bootstrap/ng",{"_index":611,"title":{},"body":{"dependencies.html":{}}}],["brief",{"_index":482,"title":{},"body":{"contributing.html":{}}}],["browse",{"_index":725,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":595,"title":{},"body":{"dependencies.html":{},"modules.html":{}}}],["bugs",{"_index":424,"title":{},"body":{"contributing.html":{}}}],["business",{"_index":431,"title":{},"body":{"contributing.html":{}}}],["c",{"_index":658,"title":{},"body":{"license.html":{}}}],["candidate",{"_index":333,"title":{},"body":{"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["car",{"_index":525,"title":{},"body":{"contributing.html":{}}}],["carl",{"_index":554,"title":{},"body":{"contributing.html":{}}}],["cdn",{"_index":538,"title":{},"body":{"contributing.html":{}}}],["changed",{"_index":486,"title":{},"body":{"contributing.html":{}}}],["changes",{"_index":445,"title":{},"body":{"contributing.html":{}}}],["channel",{"_index":428,"title":{},"body":{"contributing.html":{}}}],["charge",{"_index":665,"title":{},"body":{"license.html":{}}}],["chat.freenode.net",{"_index":427,"title":{},"body":{"contributing.html":{}}}],["claim",{"_index":712,"title":{},"body":{"license.html":{}}}],["class",{"_index":27,"title":{"classes/AuthResolver.html":{},"classes/User1625698873164.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/User1625698873164.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["classes",{"_index":100,"title":{},"body":{"classes/AuthResolver.html":{},"classes/User1625698873164.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"overview.html":{}}}],["clear",{"_index":449,"title":{},"body":{"contributing.html":{}}}],["client",{"_index":760,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cluster_appmodule",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":68,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":71,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":70,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":69,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":374,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":375,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":376,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":443,"title":{},"body":{"contributing.html":{}}}],["coding",{"_index":463,"title":{},"body":{"contributing.html":{}}}],["column",{"_index":296,"title":{},"body":{"classes/UserEntity.html":{}}}],["column({length",{"_index":307,"title":{},"body":{"classes/UserEntity.html":{}}}],["column({nullable",{"_index":314,"title":{},"body":{"classes/UserEntity.html":{}}}],["come",{"_index":394,"title":{},"body":{"contributing.html":{}}}],["commit",{"_index":473,"title":{},"body":{"contributing.html":{}}}],["commits",{"_index":468,"title":{},"body":{"contributing.html":{}}}],["compare",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PasswordService.html":{}}}],["compare(password",{"_index":259,"title":{},"body":{"injectables/PasswordService.html":{}}}],["comparehash",{"_index":239,"title":{},"body":{"injectables/PasswordService.html":{}}}],["comparehash(password",{"_index":241,"title":{},"body":{"injectables/PasswordService.html":{}}}],["conditions",{"_index":690,"title":{},"body":{"license.html":{}}}],["connection",{"_index":721,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["consider",{"_index":519,"title":{},"body":{"contributing.html":{}}}],["consistently",{"_index":535,"title":{},"body":{"contributing.html":{}}}],["consists",{"_index":438,"title":{},"body":{"contributing.html":{}}}],["const",{"_index":172,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":108,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["constructor(authservice",{"_index":109,"title":{},"body":{"classes/AuthResolver.html":{}}}],["constructor(jwtservice",{"_index":149,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(private",{"_index":141,"title":{},"body":{"classes/AuthResolver.html":{}}}],["constructor(userrepository",{"_index":352,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(userservice",{"_index":325,"title":{},"body":{"classes/UserResolver.html":{}}}],["contain",{"_index":77,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["context",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"injectables/GqlAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["contract",{"_index":717,"title":{},"body":{"license.html":{}}}],["contribute",{"_index":383,"title":{},"body":{"contributing.html":{}}}],["contributing",{"_index":382,"title":{"contributing.html":{}},"body":{}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"coverage.html":{},"overview.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["conventions",{"_index":464,"title":{},"body":{"contributing.html":{}}}],["copies",{"_index":684,"title":{},"body":{"license.html":{}}}],["copy",{"_index":668,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":657,"title":{},"body":{"license.html":{}}}],["coverage",{"_index":461,"title":{"coverage.html":{}},"body":{"contributing.html":{},"coverage.html":{}}}],["create",{"_index":348,"title":{},"body":{"injectables/UserService.html":{},"contributing.html":{}}}],["created",{"_index":287,"title":{},"body":{"classes/UserEntity.html":{}}}],["createdatecolumn",{"_index":291,"title":{},"body":{"classes/UserEntity.html":{}}}],["createparamdecorator((data",{"_index":735,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createuser",{"_index":349,"title":{},"body":{"injectables/UserService.html":{}}}],["createuser(user",{"_index":355,"title":{},"body":{"injectables/UserService.html":{}}}],["creation",{"_index":293,"title":{},"body":{"classes/UserEntity.html":{}}}],["css",{"_index":549,"title":{},"body":{"contributing.html":{}}}],["ctx",{"_index":207,"title":{},"body":{"injectables/GqlAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["ctx.getargs()[1",{"_index":772,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.getcontext().req",{"_index":209,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["cucumber",{"_index":435,"title":{},"body":{"contributing.html":{}}}],["currentuser",{"_index":336,"title":{},"body":{"classes/UserResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["custom",{"_index":756,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cwd",{"_index":544,"title":{},"body":{"contributing.html":{}}}],["damages",{"_index":713,"title":{},"body":{"license.html":{}}}],["data",{"_index":127,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["database",{"_index":750,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date",{"_index":294,"title":{},"body":{"classes/UserEntity.html":{},"miscellaneous/variables.html":{}}}],["date(ast.value",{"_index":766,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date(environment.jwt.expiresin).getdate",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{}}}],["date(value",{"_index":762,"title":{},"body":{"miscellaneous/variables.html":{}}}],["day",{"_index":417,"title":{},"body":{"contributing.html":{}}}],["db",{"_index":284,"title":{},"body":{"classes/UserEntity.html":{}}}],["deal",{"_index":671,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":722,"title":{},"body":{"license.html":{}}}],["decorators",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"classes/AuthResolver.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{}}}],["decorators/auth.decorator",{"_index":138,"title":{},"body":{"classes/AuthResolver.html":{}}}],["decorators/user.decorator",{"_index":337,"title":{},"body":{"classes/UserResolver.html":{}}}],["default",{"_index":249,"title":{},"body":{"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"miscellaneous/variables.html":{}}}],["defaultstrategy",{"_index":92,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/User1625698873164.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":178,"title":{},"body":{"injectables/AuthService.html":{},"classes/User1625698873164.html":{}}}],["dennytim",{"_index":660,"title":{},"body":{"license.html":{}}}],["dependencies",{"_index":35,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["describing",{"_index":485,"title":{},"body":{"contributing.html":{}}}],["description",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/User1625698873164.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["developer",{"_index":423,"title":{},"body":{"contributing.html":{}}}],["developers",{"_index":391,"title":{},"body":{"contributing.html":{}}}],["disable",{"_index":228,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["distribute",{"_index":680,"title":{},"body":{"license.html":{}}}],["documentation",{"_index":559,"title":{},"body":{"coverage.html":{},"index.html":{},"license.html":{}}}],["doing",{"_index":527,"title":{},"body":{"contributing.html":{}}}],["done",{"_index":451,"title":{},"body":{"contributing.html":{}}}],["donuts",{"_index":528,"title":{},"body":{"contributing.html":{}}}],["down",{"_index":270,"title":{},"body":{"classes/User1625698873164.html":{}}}],["down(queryrunner",{"_index":272,"title":{},"body":{"classes/User1625698873164.html":{}}}],["driving",{"_index":524,"title":{},"body":{"contributing.html":{}}}],["dropschema",{"_index":752,"title":{},"body":{"miscellaneous/variables.html":{}}}],["during",{"_index":430,"title":{},"body":{"contributing.html":{}}}],["dynamic",{"_index":596,"title":{},"body":{"dependencies.html":{}}}],["e",{"_index":298,"title":{},"body":{"classes/UserEntity.html":{}}}],["email",{"_index":266,"title":{},"body":{"classes/User1625698873164.html":{},"classes/UserEntity.html":{}}}],["engine",{"_index":622,"title":{},"body":{"dependencies.html":{}}}],["entities/user.entity",{"_index":338,"title":{},"body":{"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["entity",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{},"classes/UserEntity.html":{},"modules/UsersModule.html":{}}}],["environment",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["environment.connection",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["environment.jwt.expiresin",{"_index":99,"title":{},"body":{"modules/AuthModule.html":{}}}],["environment.jwt.secret",{"_index":96,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["environments/environment",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["eslint",{"_index":227,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["eslint/no",{"_index":232,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["event",{"_index":708,"title":{},"body":{"license.html":{}}}],["examples",{"_index":440,"title":{},"body":{"contributing.html":{}}}],["excited",{"_index":404,"title":{},"body":{"contributing.html":{}}}],["execute",{"_index":102,"title":{},"body":{"classes/AuthResolver.html":{},"classes/UserResolver.html":{}}}],["executioncontext",{"_index":202,"title":{},"body":{"injectables/GqlAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["expiresin",{"_index":98,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["explicit",{"_index":233,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["export",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/User1625698873164.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["exports",{"_index":81,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["express",{"_index":608,"title":{},"body":{"dependencies.html":{},"license.html":{}}}],["extends",{"_index":205,"title":{},"body":{"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["extract",{"_index":736,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extractjwt",{"_index":220,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":224,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extracts",{"_index":775,"title":{},"body":{"miscellaneous/variables.html":{}}}],["false",{"_index":177,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["feature",{"_index":471,"title":{},"body":{"contributing.html":{}}}],["features",{"_index":436,"title":{},"body":{"contributing.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/User1625698873164.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["files",{"_index":670,"title":{},"body":{"license.html":{}}}],["find",{"_index":327,"title":{},"body":{"classes/UserResolver.html":{},"injectables/UserService.html":{},"contributing.html":{}}}],["findonebyid",{"_index":350,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyid(id",{"_index":359,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyusername",{"_index":351,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyusername(username",{"_index":361,"title":{},"body":{"injectables/UserService.html":{}}}],["fine",{"_index":476,"title":{},"body":{"contributing.html":{}}}],["fitness",{"_index":704,"title":{},"body":{"license.html":{}}}],["follow",{"_index":462,"title":{},"body":{"contributing.html":{}}}],["following",{"_index":689,"title":{},"body":{"license.html":{}}}],["foot",{"_index":411,"title":{},"body":{"contributing.html":{}}}],["forever",{"_index":456,"title":{},"body":{"contributing.html":{}}}],["format",{"_index":768,"title":{},"body":{"miscellaneous/variables.html":{}}}],["foundation",{"_index":558,"title":{},"body":{"contributing.html":{}}}],["free",{"_index":664,"title":{},"body":{"license.html":{}}}],["freenode",{"_index":400,"title":{},"body":{"contributing.html":{}}}],["fruition",{"_index":395,"title":{},"body":{"contributing.html":{}}}],["function",{"_index":579,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":651,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":687,"title":{},"body":{"license.html":{}}}],["generators",{"_index":504,"title":{},"body":{"contributing.html":{}}}],["getdata",{"_index":14,"title":{},"body":{"controllers/AppController.html":{}}}],["gethash",{"_index":240,"title":{},"body":{"injectables/PasswordService.html":{}}}],["gethash(password",{"_index":246,"title":{},"body":{"injectables/PasswordService.html":{}}}],["getrequest",{"_index":200,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["getrequest(context",{"_index":201,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["getting",{"_index":380,"title":{"contributing.html":{},"index.html":{},"license.html":{}},"body":{}}],["git",{"_index":480,"title":{},"body":{"contributing.html":{}}}],["github",{"_index":447,"title":{},"body":{"contributing.html":{}}}],["glad",{"_index":386,"title":{},"body":{"contributing.html":{}}}],["goal",{"_index":531,"title":{},"body":{"contributing.html":{}}}],["going",{"_index":414,"title":{},"body":{"contributing.html":{}}}],["gqlauthguard",{"_index":193,"title":{"injectables/GqlAuthGuard.html":{}},"body":{"injectables/GqlAuthGuard.html":{},"classes/UserResolver.html":{},"coverage.html":{}}}],["gqlexecutioncontext",{"_index":197,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["gqlexecutioncontext.create(context",{"_index":208,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["granted",{"_index":663,"title":{},"body":{"license.html":{}}}],["graphql",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthResolver.html":{},"classes/UserResolver.html":{},"dependencies.html":{}}}],["graphqljson",{"_index":769,"title":{},"body":{"miscellaneous/variables.html":{}}}],["graphqlmodule",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["graphqlmodule.forroot",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["graphqlscalartype",{"_index":755,"title":{},"body":{"miscellaneous/variables.html":{}}}],["guard",{"_index":340,"title":{},"body":{"classes/UserResolver.html":{}}}],["guard.ts",{"_index":195,"title":{},"body":{"injectables/GqlAuthGuard.html":{},"coverage.html":{}}}],["guard.ts:16",{"_index":203,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["guards/gql.auth",{"_index":339,"title":{},"body":{"classes/UserResolver.html":{}}}],["haml",{"_index":499,"title":{},"body":{"contributing.html":{}}}],["handful",{"_index":434,"title":{},"body":{"contributing.html":{}}}],["hang",{"_index":490,"title":{},"body":{"contributing.html":{}}}],["hash",{"_index":245,"title":{},"body":{"injectables/PasswordService.html":{},"contributing.html":{}}}],["hash(password",{"_index":257,"title":{},"body":{"injectables/PasswordService.html":{}}}],["haven't",{"_index":396,"title":{},"body":{"contributing.html":{}}}],["help",{"_index":392,"title":{},"body":{"contributing.html":{}}}],["helpers",{"_index":505,"title":{},"body":{"contributing.html":{}}}],["here",{"_index":405,"title":{},"body":{"contributing.html":{}}}],["hereby",{"_index":662,"title":{},"body":{"license.html":{}}}],["holders",{"_index":710,"title":{},"body":{"license.html":{}}}],["host",{"_index":744,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hours",{"_index":432,"title":{},"body":{"contributing.html":{}}}],["html",{"_index":503,"title":{},"body":{"contributing.html":{}}}],["https://github.com/kelektiv/node.bcrypt.js#readme",{"_index":256,"title":{},"body":{"injectables/PasswordService.html":{}}}],["i'm",{"_index":384,"title":{},"body":{"contributing.html":{}}}],["id",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":306,"title":{},"body":{"classes/UserEntity.html":{},"coverage.html":{}}}],["ignoreexpiration",{"_index":225,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["image",{"_index":547,"title":{},"body":{"contributing.html":{}}}],["image_path",{"_index":539,"title":{},"body":{"contributing.html":{}}}],["image_tag",{"_index":540,"title":{},"body":{"contributing.html":{}}}],["images",{"_index":537,"title":{},"body":{"contributing.html":{}}}],["impact.\"coding",{"_index":487,"title":{},"body":{"contributing.html":{}}}],["implement",{"_index":123,"title":{},"body":{"classes/AuthResolver.html":{},"classes/UserResolver.html":{}}}],["implements",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/User1625698873164.html":{},"classes/UserEntity.html":{}}}],["implied",{"_index":700,"title":{},"body":{"license.html":{}}}],["import",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/User1625698873164.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["important",{"_index":406,"title":{},"body":{"contributing.html":{}}}],["imports",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["include",{"_index":457,"title":{},"body":{"contributing.html":{}}}],["included",{"_index":694,"title":{},"body":{"license.html":{}}}],["including",{"_index":674,"title":{},"body":{"license.html":{}}}],["incoming",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{}}}],["indent",{"_index":493,"title":{},"body":{"contributing.html":{}}}],["index",{"_index":12,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/User1625698873164.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/User1625698873164.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["init",{"_index":264,"title":{},"body":{"classes/User1625698873164.html":{}}}],["inject",{"_index":111,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["injectable",{"_index":145,"title":{"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":146,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectrepository",{"_index":363,"title":{},"body":{"injectables/UserService.html":{}}}],["injectrepository(userentity",{"_index":364,"title":{},"body":{"injectables/UserService.html":{}}}],["insert",{"_index":279,"title":{},"body":{"classes/User1625698873164.html":{}}}],["instead",{"_index":550,"title":{},"body":{"contributing.html":{}}}],["interaction",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["interfaces",{"_index":129,"title":{},"body":{"classes/AuthResolver.html":{}}}],["irc",{"_index":398,"title":{},"body":{"contributing.html":{}}}],["isignauthpayload",{"_index":120,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{}}}],["isignauthresponse",{"_index":134,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{}}}],["isvalid",{"_index":174,"title":{},"body":{"injectables/AuthService.html":{}}}],["it's",{"_index":522,"title":{},"body":{"contributing.html":{}}}],["items",{"_index":507,"title":{},"body":{"contributing.html":{}}}],["iuser",{"_index":286,"title":{},"body":{"classes/UserEntity.html":{}}}],["join",{"_index":422,"title":{},"body":{"contributing.html":{}}}],["json",{"_index":635,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["jwt",{"_index":93,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["jwtfromrequest",{"_index":223,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":84,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":94,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":73,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kind",{"_index":699,"title":{},"body":{"license.html":{}}}],["kind.string",{"_index":765,"title":{},"body":{"miscellaneous/variables.html":{}}}],["length",{"_index":320,"title":{},"body":{"classes/UserEntity.html":{}}}],["liability",{"_index":714,"title":{},"body":{"license.html":{}}}],["liable",{"_index":711,"title":{},"body":{"license.html":{}}}],["lib",{"_index":125,"title":{},"body":{"classes/AuthResolver.html":{}}}],["license",{"_index":655,"title":{"license.html":{}},"body":{"license.html":{}}}],["lighthouse",{"_index":425,"title":{},"body":{"contributing.html":{}}}],["limitation",{"_index":675,"title":{},"body":{"license.html":{}}}],["limited",{"_index":701,"title":{},"body":{"license.html":{}}}],["line",{"_index":230,"title":{},"body":{"injectables/JwtStrategy.html":{},"contributing.html":{}}}],["list",{"_index":421,"title":{},"body":{"contributing.html":{}}}],["log",{"_index":474,"title":{},"body":{"contributing.html":{}}}],["logging",{"_index":754,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logic",{"_index":78,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{},"contributing.html":{}}}],["login",{"_index":106,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{}}}],["login(signinpayload",{"_index":119,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{}}}],["logout",{"_index":107,"title":{},"body":{"classes/AuthResolver.html":{}}}],["look",{"_index":479,"title":{},"body":{"contributing.html":{}}}],["love",{"_index":455,"title":{},"body":{"contributing.html":{}}}],["m",{"_index":481,"title":{},"body":{"contributing.html":{}}}],["mail",{"_index":299,"title":{},"body":{"classes/UserEntity.html":{}}}],["mailing",{"_index":420,"title":{},"body":{"contributing.html":{}}}],["main",{"_index":653,"title":{},"body":{"index.html":{}}}],["make",{"_index":466,"title":{},"body":{"contributing.html":{}}}],["management",{"_index":418,"title":{},"body":{"contributing.html":{}}}],["matching",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/User1625698873164.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"contributing.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["merchantability",{"_index":703,"title":{},"body":{"license.html":{}}}],["merge",{"_index":678,"title":{},"body":{"license.html":{}}}],["message",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"contributing.html":{}}}],["messages",{"_index":475,"title":{},"body":{"contributing.html":{}}}],["metadata",{"_index":642,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":508,"title":{},"body":{"contributing.html":{}}}],["methods",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/User1625698873164.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["migrationinterface",{"_index":268,"title":{},"body":{"classes/User1625698873164.html":{}}}],["miscellaneous",{"_index":650,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":656,"title":{},"body":{"license.html":{}}}],["modern",{"_index":135,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/UserEntity.html":{}}}],["modify",{"_index":677,"title":{},"body":{"license.html":{}}}],["module",{"_index":32,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["modules",{"_index":34,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":453,"title":{},"body":{"contributing.html":{}}}],["name",{"_index":113,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/User1625698873164.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["necessary",{"_index":300,"title":{},"body":{"classes/UserEntity.html":{}}}],["need",{"_index":389,"title":{},"body":{"contributing.html":{}}}],["nestjs/common",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":603,"title":{},"body":{"dependencies.html":{}}}],["nestjs/graphql",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthResolver.html":{},"injectables/GqlAuthGuard.html":{},"classes/UserResolver.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":85,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":83,"title":{},"body":{"modules/AuthModule.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":607,"title":{},"body":{"dependencies.html":{}}}],["nestjs/typeorm",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["never",{"_index":542,"title":{},"body":{"contributing.html":{}}}],["new",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{},"contributing.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newuser",{"_index":371,"title":{},"body":{"injectables/UserService.html":{}}}],["next",{"_index":229,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["ng",{"_index":610,"title":{},"body":{"dependencies.html":{}}}],["ngrx/component",{"_index":613,"title":{},"body":{"dependencies.html":{}}}],["ngrx/effects",{"_index":616,"title":{},"body":{"dependencies.html":{}}}],["ngrx/entity",{"_index":618,"title":{},"body":{"dependencies.html":{}}}],["ngrx/router",{"_index":619,"title":{},"body":{"dependencies.html":{}}}],["ngrx/store",{"_index":620,"title":{},"body":{"dependencies.html":{}}}],["nguniversal/express",{"_index":621,"title":{},"body":{"dependencies.html":{}}}],["nice",{"_index":521,"title":{},"body":{"contributing.html":{}}}],["nickname",{"_index":288,"title":{},"body":{"classes/UserEntity.html":{}}}],["noninfringement",{"_index":707,"title":{},"body":{"license.html":{}}}],["notice",{"_index":692,"title":{},"body":{"license.html":{}}}],["nrwl/angular",{"_index":623,"title":{},"body":{"dependencies.html":{}}}],["null",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["nullable",{"_index":309,"title":{},"body":{"classes/UserEntity.html":{}}}],["number",{"_index":248,"title":{},"body":{"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{}}}],["number(process.env.db_port",{"_index":747,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number(process.env.jwt_expires_in",{"_index":741,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object",{"_index":737,"title":{},"body":{"miscellaneous/variables.html":{}}}],["obtaining",{"_index":667,"title":{},"body":{"license.html":{}}}],["one",{"_index":470,"title":{},"body":{"contributing.html":{}}}],["open",{"_index":517,"title":{},"body":{"contributing.html":{}}}],["opengovernment",{"_index":399,"title":{},"body":{"contributing.html":{}}}],["operators",{"_index":513,"title":{},"body":{"contributing.html":{}}}],["optimize",{"_index":491,"title":{},"body":{"contributing.html":{}}}],["optional",{"_index":115,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/User1625698873164.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["otherwise",{"_index":719,"title":{},"body":{"license.html":{}}}],["out",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"license.html":{},"overview.html":{}}}],["overview",{"_index":726,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":584,"title":{"dependencies.html":{}},"body":{}}],["page",{"_index":654,"title":{},"body":{"index.html":{}}}],["paragraph",{"_index":484,"title":{},"body":{"contributing.html":{}}}],["param",{"_index":140,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["parameters",{"_index":112,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/User1625698873164.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"contributing.html":{}}}],["parseliteral(ast",{"_index":763,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parsevalue(value",{"_index":761,"title":{},"body":{"miscellaneous/variables.html":{}}}],["partial",{"_index":356,"title":{},"body":{"injectables/UserService.html":{}}}],["participatory",{"_index":556,"title":{},"body":{"contributing.html":{}}}],["particular",{"_index":705,"title":{},"body":{"license.html":{}}}],["pass",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{}}}],["passengers",{"_index":530,"title":{},"body":{"contributing.html":{}}}],["passport",{"_index":212,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":82,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":91,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":219,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":222,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PasswordService.html":{},"classes/User1625698873164.html":{},"classes/UserEntity.html":{},"miscellaneous/variables.html":{}}}],["password.service",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{}}}],["passwordhash",{"_index":242,"title":{},"body":{"injectables/PasswordService.html":{}}}],["passwordservice",{"_index":74,"title":{"injectables/PasswordService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/PasswordService.html":{},"coverage.html":{},"overview.html":{}}}],["paths",{"_index":546,"title":{},"body":{"contributing.html":{}}}],["payload",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":234,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.username",{"_index":235,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["people",{"_index":520,"title":{},"body":{"contributing.html":{}}}],["per",{"_index":472,"title":{},"body":{"contributing.html":{}}}],["perhaps",{"_index":526,"title":{},"body":{"contributing.html":{}}}],["permission",{"_index":661,"title":{},"body":{"license.html":{}}}],["permit",{"_index":685,"title":{},"body":{"license.html":{}}}],["person",{"_index":666,"title":{},"body":{"license.html":{}}}],["persons",{"_index":686,"title":{},"body":{"license.html":{}}}],["pg",{"_index":639,"title":{},"body":{"dependencies.html":{}}}],["phone",{"_index":289,"title":{},"body":{"classes/UserEntity.html":{}}}],["pivotal",{"_index":415,"title":{},"body":{"contributing.html":{}}}],["plain",{"_index":244,"title":{},"body":{"injectables/PasswordService.html":{}}}],["playground",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["please",{"_index":441,"title":{},"body":{"contributing.html":{}}}],["politics",{"_index":557,"title":{},"body":{"contributing.html":{}}}],["port",{"_index":746,"title":{},"body":{"miscellaneous/variables.html":{}}}],["portions",{"_index":696,"title":{},"body":{"license.html":{}}}],["possible",{"_index":534,"title":{},"body":{"contributing.html":{}}}],["prepend",{"_index":543,"title":{},"body":{"contributing.html":{}}}],["present",{"_index":311,"title":{},"body":{"classes/UserEntity.html":{}}}],["primarygeneratedcolumn",{"_index":304,"title":{},"body":{"classes/UserEntity.html":{}}}],["private",{"_index":171,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PasswordService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["privatekey",{"_index":95,"title":{},"body":{"modules/AuthModule.html":{}}}],["process.env.db_host",{"_index":745,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_name",{"_index":751,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_type",{"_index":742,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_user_name",{"_index":748,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_user_password",{"_index":749,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.jwt_secret",{"_index":740,"title":{},"body":{"miscellaneous/variables.html":{}}}],["production",{"_index":738,"title":{},"body":{"miscellaneous/variables.html":{}}}],["project",{"_index":393,"title":{},"body":{"contributing.html":{}}}],["promise",{"_index":130,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/PasswordService.html":{},"classes/User1625698873164.html":{},"injectables/UserService.html":{}}}],["properties",{"_index":237,"title":{},"body":{"injectables/PasswordService.html":{},"classes/UserEntity.html":{}}}],["provide",{"_index":214,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{}}}],["provided",{"_index":697,"title":{},"body":{"license.html":{}}}],["providers",{"_index":80,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["provides",{"_index":332,"title":{},"body":{"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["public",{"_index":269,"title":{},"body":{"classes/User1625698873164.html":{},"classes/UserEntity.html":{}}}],["publish",{"_index":679,"title":{},"body":{"license.html":{}}}],["pull",{"_index":448,"title":{},"body":{"contributing.html":{}}}],["purpose",{"_index":706,"title":{},"body":{"license.html":{}}}],["put",{"_index":506,"title":{},"body":{"contributing.html":{}}}],["putting",{"_index":502,"title":{},"body":{"contributing.html":{}}}],["query",{"_index":104,"title":{},"body":{"classes/AuthResolver.html":{},"classes/UserResolver.html":{}}}],["query('login",{"_index":121,"title":{},"body":{"classes/AuthResolver.html":{}}}],["query('logout",{"_index":131,"title":{},"body":{"classes/AuthResolver.html":{}}}],["query('user",{"_index":343,"title":{},"body":{"classes/UserResolver.html":{}}}],["query('user')@useguards(gqlauthguard",{"_index":330,"title":{},"body":{"classes/UserResolver.html":{}}}],["queryrunner",{"_index":273,"title":{},"body":{"classes/User1625698873164.html":{}}}],["queryrunner.query",{"_index":278,"title":{},"body":{"classes/User1625698873164.html":{}}}],["read",{"_index":452,"title":{},"body":{"contributing.html":{}}}],["readability",{"_index":492,"title":{},"body":{"contributing.html":{}}}],["reading",{"_index":388,"title":{},"body":{"contributing.html":{}}}],["readonly",{"_index":142,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["really",{"_index":385,"title":{},"body":{"contributing.html":{}}}],["referring",{"_index":541,"title":{},"body":{"contributing.html":{}}}],["reflect",{"_index":641,"title":{},"body":{"dependencies.html":{}}}],["relative",{"_index":545,"title":{},"body":{"contributing.html":{}}}],["report",{"_index":426,"title":{},"body":{"contributing.html":{}}}],["repository",{"_index":353,"title":{},"body":{"injectables/UserService.html":{}}}],["req",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["request",{"_index":198,"title":{},"body":{"injectables/GqlAuthGuard.html":{},"contributing.html":{}}}],["requests",{"_index":454,"title":{},"body":{"contributing.html":{}}}],["reset",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resolve",{"_index":770,"title":{},"body":{"miscellaneous/variables.html":{}}}],["resolver",{"_index":133,"title":{},"body":{"classes/AuthResolver.html":{},"classes/UserResolver.html":{}}}],["resolver('auth",{"_index":139,"title":{},"body":{"classes/AuthResolver.html":{}}}],["resolver('user",{"_index":342,"title":{},"body":{"classes/UserResolver.html":{}}}],["resolvermap",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["resolvers",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["resolvers/auth.resolver",{"_index":90,"title":{},"body":{"modules/AuthModule.html":{}}}],["resolvers/user.resolver",{"_index":378,"title":{},"body":{"modules/UsersModule.html":{}}}],["resources",{"_index":407,"title":{},"body":{"contributing.html":{}}}],["restriction",{"_index":673,"title":{},"body":{"license.html":{}}}],["result",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/User1625698873164.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"contributing.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/User1625698873164.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"contributing.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/User1625698873164.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["ride",{"_index":532,"title":{},"body":{"contributing.html":{}}}],["rights",{"_index":676,"title":{},"body":{"license.html":{}}}],["roadmap",{"_index":409,"title":{},"body":{"contributing.html":{}}}],["root",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"classes/User1625698873164.html":{},"contributing.html":{}}}],["root@example.com",{"_index":281,"title":{},"body":{"classes/User1625698873164.html":{}}}],["rounds",{"_index":254,"title":{},"body":{"injectables/PasswordService.html":{}}}],["rspec",{"_index":439,"title":{},"body":{"contributing.html":{}}}],["rxjs",{"_index":644,"title":{},"body":{"dependencies.html":{}}}],["salt",{"_index":253,"title":{},"body":{"injectables/PasswordService.html":{}}}],["saltrounds",{"_index":238,"title":{},"body":{"injectables/PasswordService.html":{}}}],["scalar",{"_index":757,"title":{},"body":{"miscellaneous/variables.html":{}}}],["search",{"_index":334,"title":{},"body":{"classes/UserResolver.html":{}}}],["secret",{"_index":739,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secretorkey",{"_index":226,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["see",{"_index":255,"title":{},"body":{"injectables/PasswordService.html":{}}}],["sell",{"_index":683,"title":{},"body":{"license.html":{}}}],["send",{"_index":446,"title":{},"body":{"contributing.html":{},"miscellaneous/variables.html":{}}}],["serialize(value",{"_index":758,"title":{},"body":{"miscellaneous/variables.html":{}}}],["serve",{"_index":536,"title":{},"body":{"contributing.html":{}}}],["server",{"_index":597,"title":{},"body":{"dependencies.html":{}}}],["services/auth.service",{"_index":86,"title":{},"body":{"modules/AuthModule.html":{},"classes/AuthResolver.html":{}}}],["services/jwt.strategy",{"_index":88,"title":{},"body":{"modules/AuthModule.html":{}}}],["services/password.service",{"_index":87,"title":{},"body":{"modules/AuthModule.html":{}}}],["services/user.service",{"_index":335,"title":{},"body":{"classes/UserResolver.html":{},"modules/UsersModule.html":{}}}],["set",{"_index":301,"title":{},"body":{"classes/UserEntity.html":{}}}],["shall",{"_index":693,"title":{},"body":{"license.html":{}}}],["shared",{"_index":126,"title":{},"body":{"classes/AuthResolver.html":{}}}],["signauthresponse",{"_index":118,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{}}}],["signin",{"_index":137,"title":{},"body":{"classes/AuthResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["signinpayload",{"_index":124,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{}}}],["signinpayload.password",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{}}}],["signinpayload.username",{"_index":181,"title":{},"body":{"injectables/AuthService.html":{}}}],["signoptions",{"_index":97,"title":{},"body":{"modules/AuthModule.html":{}}}],["small",{"_index":477,"title":{},"body":{"contributing.html":{}}}],["smooth",{"_index":533,"title":{},"body":{"contributing.html":{}}}],["soft",{"_index":497,"title":{},"body":{"contributing.html":{}}}],["software",{"_index":518,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["sort",{"_index":523,"title":{},"body":{"contributing.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/User1625698873164.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"contributing.html":{}}}],["space",{"_index":419,"title":{},"body":{"contributing.html":{}}}],["spaces",{"_index":496,"title":{},"body":{"contributing.html":{}}}],["standard",{"_index":211,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["start",{"_index":488,"title":{},"body":{"contributing.html":{}}}],["started",{"_index":381,"title":{"contributing.html":{},"index.html":{},"license.html":{}},"body":{}}],["statements",{"_index":560,"title":{},"body":{"coverage.html":{}}}],["store",{"_index":614,"title":{},"body":{"dependencies.html":{}}}],["strategy",{"_index":221,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["subject",{"_index":688,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":681,"title":{},"body":{"license.html":{}}}],["submitting",{"_index":444,"title":{},"body":{"contributing.html":{}}}],["substantial",{"_index":695,"title":{},"body":{"license.html":{}}}],["summary",{"_index":483,"title":{},"body":{"contributing.html":{}}}],["super",{"_index":215,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["support",{"_index":723,"title":{},"body":{"modules.html":{}}}],["sure",{"_index":467,"title":{},"body":{"contributing.html":{}}}],["svg",{"_index":724,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":753,"title":{},"body":{"miscellaneous/variables.html":{}}}],["table",{"_index":285,"title":{},"body":{"classes/UserEntity.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":583,"title":{},"body":{"coverage.html":{}}}],["tabs",{"_index":498,"title":{},"body":{"contributing.html":{}}}],["tashian",{"_index":555,"title":{},"body":{"contributing.html":{}}}],["tells",{"_index":408,"title":{},"body":{"contributing.html":{}}}],["test",{"_index":460,"title":{},"body":{"contributing.html":{}}}],["testbed",{"_index":437,"title":{},"body":{"contributing.html":{}}}],["testing",{"_index":433,"title":{},"body":{"contributing.html":{}}}],["thanks",{"_index":553,"title":{},"body":{"contributing.html":{}}}],["things",{"_index":403,"title":{},"body":{"contributing.html":{}}}],["this.authservice.login(signinpayload",{"_index":144,"title":{},"body":{"classes/AuthResolver.html":{}}}],["this.jwtservice.sign(payload",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.passwordservice.comparehash(pass",{"_index":175,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.saltrounds",{"_index":258,"title":{},"body":{"injectables/PasswordService.html":{}}}],["this.userrepository.create(user",{"_index":372,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.find",{"_index":365,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.find({username",{"_index":367,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.findone(id",{"_index":366,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.save(newuser",{"_index":373,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.findonebyid(user.id",{"_index":346,"title":{},"body":{"classes/UserResolver.html":{}}}],["this.userservice.findonebyusername(username",{"_index":173,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.validateuser",{"_index":180,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":183,"title":{},"body":{"injectables/AuthService.html":{}}}],["tools",{"_index":633,"title":{},"body":{"dependencies.html":{}}}],["tort",{"_index":718,"title":{},"body":{"license.html":{}}}],["tracker",{"_index":416,"title":{},"body":{"contributing.html":{}}}],["translate",{"_index":196,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["true",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthResolver.html":{},"classes/UserEntity.html":{},"miscellaneous/variables.html":{}}}],["tslib",{"_index":645,"title":{},"body":{"dependencies.html":{}}}],["two",{"_index":495,"title":{},"body":{"contributing.html":{}}}],["type",{"_index":114,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/User1625698873164.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":277,"title":{},"body":{"classes/User1625698873164.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([userentity",{"_index":379,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forroot",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["typepaths",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["typescript",{"_index":231,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["unauthorizedexception",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{}}}],["unique",{"_index":302,"title":{},"body":{"classes/UserEntity.html":{}}}],["unknown",{"_index":218,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/UserResolver.html":{},"miscellaneous/variables.html":{}}}],["up",{"_index":271,"title":{},"body":{"classes/User1625698873164.html":{}}}],["up(queryrunner",{"_index":275,"title":{},"body":{"classes/User1625698873164.html":{}}}],["update",{"_index":318,"title":{},"body":{"classes/UserEntity.html":{}}}],["updated",{"_index":290,"title":{},"body":{"classes/UserEntity.html":{}}}],["updatedatecolumn",{"_index":316,"title":{},"body":{"classes/UserEntity.html":{}}}],["url('../images/blah.gif",{"_index":552,"title":{},"body":{"contributing.html":{}}}],["url('/images/blah.gif",{"_index":551,"title":{},"body":{"contributing.html":{}}}],["urls",{"_index":548,"title":{},"body":{"contributing.html":{}}}],["use",{"_index":459,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["used",{"_index":312,"title":{},"body":{"classes/UserEntity.html":{}}}],["useguard",{"_index":199,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["useguards",{"_index":341,"title":{},"body":{"classes/UserResolver.html":{}}}],["useguards(gqlauthguard",{"_index":344,"title":{},"body":{"classes/UserResolver.html":{}}}],["user",{"_index":117,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/User1625698873164.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["user.entity.ts",{"_index":303,"title":{},"body":{"classes/UserEntity.html":{}}}],["user.id",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.password",{"_index":176,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.ts",{"_index":262,"title":{},"body":{"classes/User1625698873164.html":{},"coverage.html":{}}}],["user.ts:12",{"_index":276,"title":{},"body":{"classes/User1625698873164.html":{}}}],["user.ts:19",{"_index":274,"title":{},"body":{"classes/User1625698873164.html":{}}}],["user.username",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{}}}],["user1625698873164",{"_index":260,"title":{"classes/User1625698873164.html":{}},"body":{"classes/User1625698873164.html":{},"coverage.html":{}}}],["userentity",{"_index":169,"title":{"classes/UserEntity.html":{}},"body":{"injectables/AuthService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userid",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["username",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/User1625698873164.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["userrepository",{"_index":328,"title":{},"body":{"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["userresolver",{"_index":321,"title":{"classes/UserResolver.html":{}},"body":{"classes/UserResolver.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["users",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{},"classes/User1625698873164.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{}}}],["users.graphql",{"_index":323,"title":{},"body":{"classes/UserResolver.html":{}}}],["users.length",{"_index":368,"title":{},"body":{"injectables/UserService.html":{}}}],["users/entities/user.entity",{"_index":170,"title":{},"body":{"injectables/AuthService.html":{}}}],["users/services/user.service",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{}}}],["users/users.module",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["users[0",{"_index":370,"title":{},"body":{"injectables/UserService.html":{}}}],["userservice",{"_index":151,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["usersmodule",{"_index":39,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["using",{"_index":494,"title":{},"body":{"contributing.html":{}}}],["usually",{"_index":429,"title":{},"body":{"contributing.html":{}}}],["validate",{"_index":116,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":216,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateuser",{"_index":148,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(username",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{}}}],["value",{"_index":250,"title":{},"body":{"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"miscellaneous/variables.html":{}}}],["value.toisostring",{"_index":759,"title":{},"body":{"miscellaneous/variables.html":{}}}],["values",{"_index":280,"title":{},"body":{"classes/User1625698873164.html":{}}}],["variable",{"_index":564,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":729,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["view",{"_index":412,"title":{},"body":{"contributing.html":{}}}],["views",{"_index":500,"title":{},"body":{"contributing.html":{}}}],["volunteer",{"_index":390,"title":{},"body":{"contributing.html":{}}}],["want",{"_index":401,"title":{},"body":{"contributing.html":{}}}],["warranties",{"_index":702,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":698,"title":{},"body":{"license.html":{}}}],["we're",{"_index":413,"title":{},"body":{"contributing.html":{}}}],["welcome",{"_index":20,"title":{},"body":{"controllers/AppController.html":{}}}],["whether",{"_index":715,"title":{},"body":{"license.html":{}}}],["whoami",{"_index":324,"title":{},"body":{"classes/UserResolver.html":{}}}],["whoami(@currentuser",{"_index":345,"title":{},"body":{"classes/UserResolver.html":{}}}],["whoami(user",{"_index":329,"title":{},"body":{"classes/UserResolver.html":{}}}],["without",{"_index":672,"title":{},"body":{"license.html":{}}}],["working",{"_index":402,"title":{},"body":{"contributing.html":{}}}],["write",{"_index":442,"title":{},"body":{"contributing.html":{}}}],["x",{"_index":514,"title":{},"body":{"contributing.html":{}}}],["x+=1",{"_index":515,"title":{},"body":{"contributing.html":{}}}],["you'll",{"_index":489,"title":{},"body":{"contributing.html":{}}}],["you're",{"_index":387,"title":{},"body":{"contributing.html":{}}}],["you've",{"_index":450,"title":{},"body":{"contributing.html":{}}}],["zone.js",{"_index":648,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/app.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                Base controller backend-api app\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getData\n                        \n                    \n                \n            \n            \n                \ngetData()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in apps/backend/api/src/app/app.controller.ts:13\n                \n            \n\n\n            \n                \n                    Return welcome string\n\n\n                    \n                        Returns :     { message: string; }\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {Controller, Get} from '@nestjs/common'\n\n\n/**\n * Base controller backend-api app\n */\n@Controller()\nexport class AppController {\n  /**\n   * Return welcome string\n   */\n  @Get()\n  getData() {\n    return {message: 'Welcome to backend/api!'}\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/backend/api/src/app/app.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Root module backend-api app\n\n        \n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import {Module} from '@nestjs/common';\nimport {GraphQLModule} from \"@nestjs/graphql\";\nimport {TypeOrmModule} from \"@nestjs/typeorm\";\n\nimport {AppController} from './app.controller';\nimport {environment} from \"../environments/environment\";\nimport {resolverMap} from \"./app.resolver\";\nimport {UsersModule} from \"./users/users.module\";\nimport {AuthModule} from './auth/auth.module';\n\n/**\n * Root module backend-api app\n */\n@Module({\n  imports: [\n    UsersModule,\n    TypeOrmModule.forRoot({\n      ...environment.connection,\n      autoLoadEntities: true,\n    }),\n    GraphQLModule.forRoot({\n      typePaths: ['./**/*.graphql'],\n      context: (({req}) => ({req})),\n      playground: true,\n      resolvers: [resolverMap],\n    }),\n    AuthModule,\n  ],\n  controllers: [AppController]\n})\nexport class AppModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nPasswordService\n\nPasswordService\n\nAuthModule -->\n\nPasswordService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/backend/api/src/app/auth/auth.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Auth module contain logic of authentication\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            PasswordService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import {Module} from '@nestjs/common'\nimport {PassportModule} from '@nestjs/passport'\nimport {JwtModule} from '@nestjs/jwt'\n\nimport {environment} from '../../environments/environment'\n\nimport {UsersModule} from '../users/users.module'\nimport {AuthService} from './services/auth.service'\nimport {PasswordService} from './services/password.service'\nimport {JwtStrategy} from './services/jwt.strategy'\nimport {AuthResolver} from './resolvers/auth.resolver'\n\n/**\n * Auth module contain logic of authentication\n */\n@Module({\n  imports: [\n    UsersModule,\n    PassportModule.register({\n      defaultStrategy: 'jwt',\n    }),\n    JwtModule.register({\n      privateKey: environment.jwt.secret,\n      signOptions: {\n        expiresIn: environment.jwt.expiresIn,\n      },\n    }),\n  ],\n  providers: [AuthService, PasswordService, JwtStrategy, AuthResolver],\n  exports: [AuthService, PassportModule],\n})\nexport class AuthModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthResolver.html":{"url":"classes/AuthResolver.html","title":"class - AuthResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/auth/resolvers/auth.resolver.ts\n        \n\n\n            \n                Description\n            \n            \n                AuthResolver execute auth.graphql query\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                logout\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in apps/backend/api/src/app/auth/resolvers/auth.resolver.ts:13\n                            \n                        \n\n                \n                    \n                            Inject into AuthResolver: AuthService\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                validate user and return SignAuthResponse\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(signInPayload: ISignAuthPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query('login')\n                \n            \n\n            \n                \n                    Defined in apps/backend/api/src/app/auth/resolvers/auth.resolver.ts:27\n                \n            \n\n\n            \n                \n                    Implement GraphQL Query 'login'\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    signInPayload\n                                    \n                                            ISignAuthPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        from lib shared-data-access-interfaces\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query('logout')\n                \n            \n\n            \n                \n                    Defined in apps/backend/api/src/app/auth/resolvers/auth.resolver.ts:37\n                \n            \n\n\n            \n                \n                    Implement GraphQL Query 'logout'\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Query, Resolver } from '@nestjs/graphql';\nimport {\n  ISignAuthPayload,\n  ISignAuthResponse,\n} from '@modern-app/shared/utils/interfaces';\nimport { SignIn } from '../decorators/auth.decorator';\nimport { AuthService } from '../services/auth.service';\n\n/**\n * AuthResolver execute auth.graphql query\n */\n@Resolver('Auth')\nexport class AuthResolver {\n  /**\n   * Inject into AuthResolver: AuthService\n   *\n   * @param authService validate user and return SignAuthResponse\n   */\n  constructor(private readonly authService: AuthService) {}\n\n  /**\n   * Implement GraphQL Query 'login'\n   *\n   * @param signInPayload from lib shared-data-access-interfaces\n   */\n  @Query('login')\n  async login(\n    @SignIn() signInPayload: ISignAuthPayload\n  ): Promise {\n    return await this.authService.login(signInPayload);\n  }\n\n  /**\n   * Implement GraphQL Query 'logout'\n   */\n  @Query('logout')\n  async logout(): Promise {\n    return true;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/auth/services/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, userService: UserService, passwordService: PasswordService)\n                    \n                \n                        \n                            \n                                Defined in apps/backend/api/src/app/auth/services/auth.service.ts:14\n                            \n                        \n\n                \n                    \n                            Inject into AuthService: JwtService, UserService, PasswordService\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Implements interaction with JWT\n\n                                                        \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Implements interaction with the user entity\n\n                                                        \n                                                \n                                                \n                                                        passwordService\n                                                  \n                                                        \n                                                                        PasswordService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Implements interaction with bcrypt and compare password\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(signInPayload: ISignAuthPayload)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/auth/services/auth.service.ts:56\n                \n            \n\n\n            \n                \n                    Return SignAuthResponse data\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    signInPayload\n                                    \n                                            ISignAuthPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Incoming login data\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(username: string, pass: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/auth/services/auth.service.ts:34\n                \n            \n\n\n            \n                \n                    Validate users\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pass\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport {\n  ISignAuthPayload,\n  ISignAuthResponse,\n} from '@modern-app/shared/utils/interfaces';\n\nimport { UserService } from '../../users/services/user.service';\nimport { PasswordService } from './password.service';\nimport { UserEntity } from '../../users/entities/user.entity';\nimport { environment } from '../../../environments/environment';\n\n@Injectable()\nexport class AuthService {\n  /**\n   * Inject into AuthService: JwtService, UserService, PasswordService\n   *\n   * @param jwtService Implements interaction with JWT\n   * @param userService Implements interaction with the user entity\n   * @param passwordService Implements interaction with bcrypt and compare password\n   */\n  constructor(\n    private readonly jwtService: JwtService,\n    private readonly userService: UserService,\n    private readonly passwordService: PasswordService\n  ) {}\n\n  /**\n   * Validate users\n   *\n   * @param username\n   * @param pass\n   */\n  async validateUser(\n    username: string,\n    pass: string\n  ): Promise> {\n    const user = await this.userService.findOneByUserName(username);\n    const isValid = user\n      ? await this.passwordService.compareHash(pass, user.password)\n      : false;\n\n    if (isValid) {\n      delete user.password;\n\n      return user;\n    }\n    return null;\n  }\n\n  /**\n   * Return SignAuthResponse data\n   *\n   * @param signInPayload Incoming login data\n   */\n  async login(signInPayload: ISignAuthPayload): Promise {\n    const user = await this.validateUser(\n      signInPayload.username,\n      signInPayload.password\n    );\n\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n\n    const payload = { username: user.username, userId: user.id };\n\n    return {\n      accessToken: this.jwtService.sign(payload),\n      expiresIn: new Date(environment.jwt.expiresIn).getDate(),\n      id: user.id,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GqlAuthGuard.html":{"url":"injectables/GqlAuthGuard.html","title":"injectable - GqlAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  GqlAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/users/guards/gql.auth-guard.ts\n        \n\n\n            \n                Description\n            \n            \n                GqlAuthGuard translate GqlExecutionContext request => UseGuard\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getRequest\n                        \n                    \n                \n            \n            \n                \ngetRequest(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/users/guards/gql.auth-guard.ts:16\n                \n            \n\n\n            \n                \n                    getRequest return ExecutionContext as GqlExecutionContext request\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { AuthGuard } from '@nestjs/passport'\nimport { ExecutionContext, Injectable } from '@nestjs/common'\nimport { GqlExecutionContext } from '@nestjs/graphql'\n\n/**\n * GqlAuthGuard translate GqlExecutionContext request => UseGuard\n *\n */\n@Injectable()\nexport class GqlAuthGuard extends AuthGuard('jwt') {\n  /**\n   * getRequest return ExecutionContext as GqlExecutionContext request\n   *\n   * @param context\n   */\n  getRequest(context: ExecutionContext) {\n    const ctx = GqlExecutionContext.create(context)\n\n    return ctx.getContext().req\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/auth/services/jwt.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                Implements interaction with standard passport-jwt methods\nand return validate data\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in apps/backend/api/src/app/auth/services/jwt.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            provide super\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/auth/services/jwt.strategy.ts:28\n                \n            \n\n\n            \n                \n                    Return validate data\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {Injectable} from '@nestjs/common';\nimport {PassportStrategy} from '@nestjs/passport';\nimport {ExtractJwt, Strategy} from 'passport-jwt';\n\nimport {environment} from \"../../../environments/environment\";\n\n/**\n * Implements interaction with standard passport-jwt methods\n * and return validate data\n */\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  /**\n   * provide super\n   */\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: environment.jwt.secret,\n    });\n  }\n  /**\n   * Return validate data\n   * @param payload\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  async validate(payload: any) {\n    return {userId: payload.sub, username: payload.username};\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PasswordService.html":{"url":"injectables/PasswordService.html","title":"injectable - PasswordService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  PasswordService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/auth/services/password.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Provide methods bcrypt and compare password\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                saltRounds\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                compareHash\n                            \n                            \n                                getHash\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        compareHash\n                        \n                    \n                \n            \n            \n                \ncompareHash(password: string, passwordHash: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/auth/services/password.service.ts:28\n                \n            \n\n\n            \n                \n                    Compare plain password with password hash\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Plain password\n\n                                    \n                                \n                                \n                                    passwordHash\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Password hash\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getHash\n                        \n                    \n                \n            \n            \n                \ngetHash(password: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/auth/services/password.service.ts:19\n                \n            \n\n\n            \n                \n                    Return hash\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Plain password\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        saltRounds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                    \n                        \n                                Defined in apps/backend/api/src/app/auth/services/password.service.ts:13\n                        \n                    \n\n            \n                \n                    Salt rounds\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { compare, hash } from 'bcrypt';\n\n/**\n * Provide methods bcrypt and compare password\n */\n@Injectable()\nexport class PasswordService {\n  /**\n   * Salt rounds\n   * @see https://github.com/kelektiv/node.bcrypt.js#readme\n   */\n  private saltRounds = 10;\n\n  /**\n   * Return hash\n   * @param password Plain password\n   */\n  getHash(password: string): Promise {\n    return hash(password, this.saltRounds);\n  }\n\n  /**\n   * Compare plain password with password hash\n   * @param password Plain password\n   * @param passwordHash Password hash\n   */\n  compareHash(password: string, passwordHash: string): Promise {\n    return compare(password, passwordHash);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User1625698873164.html":{"url":"classes/User1625698873164.html","title":"class - User1625698873164","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User1625698873164\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/migrations/1625698873164-User.ts\n        \n\n\n            \n                Description\n            \n            \n                add init user\nusername: admin\nemail: admin@example.com\npassword: root\n\n            \n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/migrations/1625698873164-User.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/migrations/1625698873164-User.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {MigrationInterface, QueryRunner} from \"typeorm\";\n\n/**\n * add init user\n * username: admin\n * email: admin@example.com\n * password: root\n */\n\nexport class User1625698873164 implements MigrationInterface {\n\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(`\n      INSERT INTO users (username, email, password)\n      VALUES ('root', 'root@example.com', '$2a$10$d6wR5W1xIiTsQPG4aTuqIOkct0Dpr8TsciVS39YP3NSOwwy1wyPsy')\n    `);\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(` DELETE FROM users WHERE username = 'admin'`);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserEntity.html":{"url":"classes/UserEntity.html","title":"class - UserEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/users/entities/user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity users provide access to db table users\n\n            \n\n\n            \n                Implements\n            \n            \n                        IUser\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                created\n                            \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                nickname\n                            \n                            \n                                password\n                            \n                            \n                                phone\n                            \n                            \n                                updated\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        created\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/backend/api/src/app/users/entities/user.entity.ts:27\n                        \n                    \n\n            \n                \n                    User creation date (autogenerate)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/backend/api/src/app/users/entities/user.entity.ts:42\n                        \n                    \n\n            \n                \n                    User e-mail\nif necessary - set the value {unique: true} in user.entity.ts\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/backend/api/src/app/users/entities/user.entity.ts:21\n                        \n                    \n\n            \n                \n                    User ID unique identifier (autogenerate)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nickname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 50, unique: true, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/backend/api/src/app/users/entities/user.entity.ts:74\n                        \n                    \n\n            \n                \n                    User nickname (optional)\nIf present used as public username\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/backend/api/src/app/users/entities/user.entity.ts:54\n                        \n                    \n\n            \n                \n                    User password\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/backend/api/src/app/users/entities/user.entity.ts:48\n                        \n                    \n\n            \n                \n                    User phone (optional)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updated\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/backend/api/src/app/users/entities/user.entity.ts:33\n                        \n                    \n\n            \n                \n                    User update date (autogenerate)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 50, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/backend/api/src/app/users/entities/user.entity.ts:64\n                        \n                    \n\n            \n                \n                    Username {unique}\nUsed as default username\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\nimport type { IUser } from '@modern-app/shared/utils/interfaces';\n\n/**\n * Entity users provide access to db table users\n */\n@Entity({\n  name: 'users',\n})\nexport class UserEntity implements IUser {\n  /**\n   * User ID unique identifier (autogenerate)\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  /**\n   * User creation date (autogenerate)\n   */\n  @CreateDateColumn()\n  created: string;\n\n  /**\n   * User update date (autogenerate)\n   */\n  @UpdateDateColumn()\n  updated: string;\n\n  /**\n   * User e-mail\n   *\n   * if necessary - set the value {unique: true} in user.entity.ts\n   *\n   */\n  @Column()\n  email: string;\n\n  /**\n   * User phone (optional)\n   */\n  @Column({ nullable: true })\n  phone: string;\n\n  /**\n   * User password\n   */\n  @Column()\n  password: string;\n\n  /**\n   * Username {unique}\n   *\n   * @description\n   *\n   * Used as default username\n   */\n  @Column({ length: 50, unique: true })\n  username: string;\n\n  /**\n   * User nickname (optional)\n   *\n   * @description\n   *\n   * If present used as public username\n   */\n  @Column({ length: 50, unique: true, nullable: true })\n  nickname: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserResolver.html":{"url":"classes/UserResolver.html","title":"class - UserResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/users/resolvers/user.resolver.ts\n        \n\n\n            \n                Description\n            \n            \n                UserResolver execute users.graphql query\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                whoAmI\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in apps/backend/api/src/app/users/resolvers/user.resolver.ts:12\n                            \n                        \n\n                \n                    \n                            Inject into UserResolver: UserService\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                find user from userRepository\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        whoAmI\n                        \n                    \n                \n            \n            \n                \n                    \n                    whoAmI(user: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query('user')@UseGuards(GqlAuthGuard)\n                \n            \n\n            \n                \n                    Defined in apps/backend/api/src/app/users/resolvers/user.resolver.ts:30\n                \n            \n\n\n            \n                \n                    Implement GraphQL Query 'user'\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        provides the user as a candidate for search in userRepository\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Query, Resolver } from '@nestjs/graphql'\nimport { UserService } from '../services/user.service'\nimport { CurrentUser } from '../decorators/user.decorator'\nimport { UserEntity } from '../entities/user.entity'\nimport { GqlAuthGuard } from '../guards/gql.auth-guard'\nimport { UseGuards } from '@nestjs/common'\n\n/**\n * UserResolver execute users.graphql query\n */\n@Resolver('User')\nexport class UserResolver {\n  /**\n   * Inject into UserResolver: UserService\n   *\n   * @param userService find user from userRepository\n   */\n  constructor(\n    private readonly userService: UserService,\n  ) {\n  }\n\n  /**\n   * Implement GraphQL Query 'user'\n   *\n   * @param user provides the user as a candidate for search in userRepository\n   */\n  @Query('user')\n  @UseGuards(GqlAuthGuard)\n  async whoAmI(@CurrentUser() user: UserEntity) {\n    return await this.userService.findOneById(user.id)\n  }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/users/services/user.service.ts\n        \n\n\n            \n                Description\n            \n            \n                UserService find or create user from userRepository\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                find\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneByUserName\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in apps/backend/api/src/app/users/services/user.service.ts:11\n                            \n                        \n\n                \n                    \n                            Inject into UserService: userRepository\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(user: Partial)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/users/services/user.service.ts:55\n                \n            \n\n\n            \n                \n                    Create new user into userRepository\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        provides candidate of new user into userRepository\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        find\n                        \n                    \n                \n            \n            \n                \n                    \n                    find()\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/users/services/user.service.ts:26\n                \n            \n\n\n            \n                \n                    Find all users from userRepository\n\n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/users/services/user.service.ts:35\n                \n            \n\n\n            \n                \n                    Find user by id from userRepository\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByUserName\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByUserName(username: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/users/services/user.service.ts:44\n                \n            \n\n\n            \n                \n                    Find user by username from userRepository\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\nimport { InjectRepository } from '@nestjs/typeorm'\nimport { Repository } from 'typeorm'\n\nimport { UserEntity } from '../entities/user.entity'\n\n/**\n * UserService find or create user from userRepository\n */\n@Injectable()\nexport class UserService {\n  /**\n   * Inject into UserService: userRepository\n   *\n   * @param userRepository\n   */\n  constructor(\n    @InjectRepository(UserEntity)\n    private readonly userRepository: Repository,\n  ) {\n  }\n\n  /**\n   * Find all users from userRepository\n   */\n  async find(): Promise {\n    return await this.userRepository.find()\n  }\n\n  /**\n   * Find user by id from userRepository\n   *\n   * @param id\n   */\n  async findOneById(id: number): Promise {\n    return await (this.userRepository.findOne(id)) || null\n  }\n\n  /**\n   * Find user by username from userRepository\n   *\n   * @param username\n   */\n  async findOneByUserName(username: string): Promise {\n    const users = await this.userRepository.find({username})\n\n    return users.length === 1 ? users[0] : null\n  }\n\n  /**\n   * Create new user into userRepository\n   *\n   * @param user provides candidate of new user into userRepository\n   */\n  async createUser(user: Partial): Promise {\n    const newUser = await this.userRepository.create(user)\n\n    return this.userRepository.save(newUser)\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUserService \n\nUserService \n\n\n\nUsersModule\n\nUsersModule\n\nUserService  -->\n\nUsersModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUsersModule -->\n\nUserService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/backend/api/src/app/users/users.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            User module contain logic user entity\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm'\n\nimport { UserService } from './services/user.service'\nimport { UserEntity } from './entities/user.entity'\nimport { UserResolver } from './resolvers/user.resolver'\n\n/**\n * User module contain logic user entity\n */\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([UserEntity])\n  ],\n  providers: [UserService, UserResolver],\n  exports: [UserService]\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"contributing.html":{"url":"contributing.html","title":"getting-started - contributing","body":"\n                   \n\nHow to contribute\nI'm really glad you're reading this, because we need volunteer developers to help this project come to fruition.\nIf you haven't already, come find us in IRC (#opengovernment on freenode). We want you working on things you're excited about.\nHere are some important resources:\n\nOpenGovernment for Developers tells you where we are,\nOur roadmap is the 10k foot view of where we're going, and\nPivotal Tracker is our day-to-day project management space.\nMailing list: Join our developer list\nBugs? Lighthouse is where to report them\nIRC: chat.freenode.net channel #opengovernment. We're usually there during business hours.\n\nTesting\nWe have a handful of Cucumber features, but most of our testbed consists of RSpec examples. Please write RSpec examples for new code you create.\nSubmitting changes\nPlease send a GitHub Pull Request to opengovernment with a clear list of what you've done (read more about pull requests). When you send a pull request, we will love you forever if you include RSpec examples. We can always use more test coverage. Please follow our coding conventions (below) and make sure all of your commits are atomic (one feature per commit).\nAlways write a clear log message for your commits. One-line messages are fine for small changes, but bigger changes should look like this:\n$ git commit -m \"A brief summary of the commit\n> \n> A paragraph describing what changed and its impact.\"Coding conventions\nStart reading our code and you'll get the hang of it. We optimize for readability:\n\nWe indent using two spaces (soft tabs)\nWe use HAML for all views\nWe avoid logic in views, putting HTML generators into helpers\nWe ALWAYS put spaces after list items and method parameters ([1, 2, 3], not [1,2,3]), around operators (x += 1, not x+=1), and around hash arrows.\nThis is open source software. Consider the people who will read your code, and make it look nice for them. It's sort of like driving a car: Perhaps you love doing donuts when you're alone, but with passengers the goal is to make the ride as smooth as possible.\nSo that we can consistently serve images from the CDN, always use image_path or image_tag when referring to images. Never prepend \"/images/\" when using image_path or image_tag.\nAlso for the CDN, always use cwd-relative paths rather than root-relative paths in image URLs in any CSS. So instead of url('/images/blah.gif'), use url('../images/blah.gif').\n\nThanks,\nCarl Tashian, Participatory Politics Foundation\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                apps/backend/api/src/app/app.controller.ts\n            \n            controller\n            AppController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/app.resolver.ts\n            \n            variable\n            resolverMap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/auth/decorators/auth.decorator.ts\n            \n            variable\n            SignIn\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/auth/resolvers/auth.resolver.ts\n            \n            class\n            AuthResolver\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/auth/services/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/auth/services/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/auth/services/password.service.ts\n            \n            injectable\n            PasswordService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/users/decorators/user.decorator.ts\n            \n            variable\n            CurrentUser\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/users/entities/user.entity.ts\n            \n            class\n            UserEntity\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/users/guards/gql.auth-guard.ts\n            \n            injectable\n            GqlAuthGuard\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/users/resolvers/user.resolver.ts\n            \n            class\n            UserResolver\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/users/services/user.service.ts\n            \n            injectable\n            UserService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                apps/backend/api/src/environments/environment.prod.ts\n            \n            variable\n            environment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/backend/api/src/environments/environment.ts\n            \n            variable\n            environment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/backend/api/src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/backend/api/src/migrations/1625698873164-User.ts\n            \n            class\n            User1625698873164\n            \n                33 %\n                (1/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : 12.1.1\n        \n            @angular/cdk : 12.1.1\n        \n            @angular/common : 12.1.1\n        \n            @angular/compiler : 12.1.1\n        \n            @angular/core : 12.1.1\n        \n            @angular/forms : 12.1.1\n        \n            @angular/localize : 12.1.1\n        \n            @angular/material : 12.1.1\n        \n            @angular/platform-browser : 12.1.1\n        \n            @angular/platform-browser-dynamic : 12.1.1\n        \n            @angular/platform-server : 12.1.0\n        \n            @angular/router : 12.1.1\n        \n            @apollo/client : ^3.3.21\n        \n            @nestjs/common : ^7.0.0\n        \n            @nestjs/core : ^7.0.0\n        \n            @nestjs/graphql : ^7.10.6\n        \n            @nestjs/jwt : ^7.2.0\n        \n            @nestjs/passport : ^7.1.6\n        \n            @nestjs/platform-express : ^7.0.0\n        \n            @nestjs/typeorm : ^7.1.5\n        \n            @ng-bootstrap/ng-bootstrap : 10.0.0\n        \n            @ngrx/component-store : ^12.0.0\n        \n            @ngrx/effects : ^12.2.0\n        \n            @ngrx/entity : ^12.0.0\n        \n            @ngrx/router-store : ^12.2.0\n        \n            @ngrx/store : ^12.2.0\n        \n            @nguniversal/express-engine : 12.1.0\n        \n            @nrwl/angular : 12.5.6\n        \n            apollo-angular : ^2.6.0\n        \n            apollo-server-express : ^2.23.0\n        \n            bcrypt : ^5.0.1\n        \n            bootstrap : 5.0.2\n        \n            express : ^4.15.2\n        \n            graphql : ^15.5.0\n        \n            graphql-tools : ^7.0.4\n        \n            graphql-type-json : ^0.3.2\n        \n            passport : ^0.4.1\n        \n            passport-jwt : ^4.0.0\n        \n            pg : ^8.6.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : 7.2.0\n        \n            tslib : ^2.0.0\n        \n            typeorm : ^0.2.32\n        \n            zone.js : ~0.11.4\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (apps/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/backend/api/src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                    Bootstrap backend-api app\n\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nMain page of BE documentation\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2021 DennyTim\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUsersModule->UserService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nPasswordService\n\nPasswordService\n\nAuthModule -->\n\nPasswordService->AuthModule\n\n\n\n\n\nUserService\n\nUserService\n\nUsersModule -->\n\nUserService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        3 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Controller\n                \n            \n        \n        \n            \n                \n                    \n                    5 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    4 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CurrentUser   (apps/.../user.decorator.ts)\n                        \n                        \n                            environment   (apps/.../environment.prod.ts)\n                        \n                        \n                            environment   (apps/.../environment.ts)\n                        \n                        \n                            resolverMap   (apps/.../app.resolver.ts)\n                        \n                        \n                            SignIn   (apps/.../auth.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/backend/api/src/app/users/decorators/user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CurrentUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator((data: unknown, ctx: ExecutionContext) => {\n  return ctx\n})\n                    \n                \n\n            \n                \n                    Extract context from ExecutionContext\n\n                \n            \n\n        \n    \n\n    apps/backend/api/src/environments/environment.prod.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        environment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  production: true,\n}\n                    \n                \n\n\n        \n    \n\n    apps/backend/api/src/environments/environment.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        environment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  production: false,\n  jwt: {\n    secret: process.env.JWT_SECRET,\n    expiresIn: Number(process.env.JWT_EXPIRES_IN)\n  },\n  connection: {\n    type: process.env.DB_TYPE as 'aurora-data-api',\n    host: process.env.DB_HOST,\n    port: Number(process.env.DB_PORT),\n    username: process.env.DB_USER_NAME,\n    password: process.env.DB_USER_PASSWORD,\n    database: process.env.DB_NAME,\n    dropSchema: false,\n    synchronize: true,\n    logging: false\n  }\n}\n                    \n                \n\n\n        \n    \n\n    apps/backend/api/src/app/app.resolver.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        resolverMap\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  Date: new GraphQLScalarType({\n    name: 'Date',\n    description: 'Date custom scalar type',\n    serialize(value: Date) {\n      return value.toISOString() // Value send to the client\n    },\n    parseValue(value: string) {\n      return new Date(value) // Value from the client\n    },\n    parseLiteral(ast) {\n      if (ast.kind === Kind.STRING) {\n        return new Date(ast.value) // ast value is always in string format\n      }\n      return null\n    },\n  }),\n  JSON: GraphQLJSON,\n}\n                    \n                \n\n            \n                \n                    Resolve scalar type Date & JSON\n\n                \n            \n\n        \n    \n\n    apps/backend/api/src/app/auth/decorators/auth.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SignIn\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator((data: unknown, ctx: ExecutionContext) => {\n  const args = ctx.getArgs()[1];\n\n  return {\n    username: args.username,\n    password: args.password\n  };\n})\n                    \n                \n\n            \n                \n                    extracts username and password from ExecutionContext\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
